{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Move Semantics\"\n",
        "author: \"Quasar\"\n",
        "date: \"2024-10-26\"\n",
        "categories: [C++]      \n",
        "image: \"cpp.jpg\"\n",
        "toc: true\n",
        "toc-depth: 3\n",
        "format:\n",
        "    html:\n",
        "        code-tools: true\n",
        "        code-block-border-left: true\n",
        "        code-annotations: below\n",
        "        highlight-style: pygments\n",
        "---\n",
        "\n",
        "\n",
        "## Motivation for Move Semantics\n",
        "\n",
        "To understand the basic principles of move semantics, let's look at the execution of a small piece of code. I've written a toy `Vector` class. I have also overloaded `operator+()` to support element-wise addition of two vectors. \n"
      ],
      "id": "e409b00f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "%load_ext itikz"
      ],
      "id": "af50409f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Before move semantics\n",
        "\n",
        "Assume that we have the following program:\n",
        "\n",
        "```cpp\n",
        "#include <iostream>\n",
        "#include <stdexcept>\n",
        "#include <initializer_list>\n",
        "\n",
        "#define assertm(exp, msg) assert(((void)msg, exp))\n",
        "\n",
        "template <typename T>\n",
        "class Vector {\n",
        "private:\n",
        "    int capacity_;\n",
        "    int size_;\n",
        "    T* ptr_;\n",
        "\n",
        "public:\n",
        "    Vector<T>() :capacity_{ 0 }, size_{ 0 }, ptr_{ nullptr } {}\n",
        "    Vector<T>(int size) : capacity_{ size }, ptr_{ new T[size] }, size_{ size } {}\n",
        "    Vector<T>(int size, T data) : Vector<T>(size) {\n",
        "        for (int i{ 0 }; i < size; ++i)\n",
        "            ptr_[i] = data;\n",
        "    }\n",
        "\n",
        "    Vector<T>(std::initializer_list<T> list) {\n",
        "        clear();\n",
        "        for (const T& elem : list)\n",
        "            push_back(elem);\n",
        "    }\n",
        "\n",
        "    //Destructor\n",
        "    ~Vector<T>()\n",
        "    {\n",
        "        clear();\n",
        "    }\n",
        "\n",
        "    //Copy constructor\n",
        "    Vector<T>(const Vector<T>& v)\n",
        "    {\n",
        "        if (this == &v)\n",
        "            return;\n",
        "\n",
        "        capacity_ = v.capacity_;\n",
        "        size_ = v.size_;\n",
        "        ptr_ = new T[v.size_];\n",
        "\n",
        "        for (int i{ 0 }; i < v.size_; ++i)\n",
        "            ptr_[i] = v.ptr_[i];\n",
        "    }\n",
        "\n",
        "    //Copy assignment operator\n",
        "    Vector<T>& operator=(const Vector<T>& v)\n",
        "    {\n",
        "        if (ptr_ != nullptr)\n",
        "            delete[] ptr_;\n",
        "\n",
        "        capacity_ = v.capacity_;\n",
        "        size_ = v.size_;\n",
        "        ptr_ = new T[v.size_];\n",
        "\n",
        "        for (int i{ 0 }; i < v.size_; ++i)\n",
        "            ptr_[i] = v.ptr_[i];\n",
        "\n",
        "        return *this;\n",
        "    }\n",
        "\n",
        "    T operator[](int i)\n",
        "    {\n",
        "        if (i < size_)\n",
        "            return ptr_[i];\n",
        "        else\n",
        "            throw std::out_of_range(\"Index out of bounds.\");\n",
        "    }\n",
        "\n",
        "    T operator[](int i) const\n",
        "    {\n",
        "        if (i < size_)\n",
        "            return ptr_[i];\n",
        "        else\n",
        "            throw std::out_of_range(\"Index out of bounds.\");\n",
        "    }\n",
        "\n",
        "    void reserve(int size)\n",
        "    {\n",
        "        if (ptr_ == nullptr)\n",
        "        {\n",
        "            size_ = 0;\n",
        "            capacity_ = 0;\n",
        "        }\n",
        "\n",
        "        T* bufferNew = new T[size];\n",
        "        unsigned int l_size = std::min(capacity_, size);\n",
        "        for (int i{ 0 }; i < l_size; ++i)\n",
        "        {\n",
        "            bufferNew[i] = ptr_[i];\n",
        "        }\n",
        "\n",
        "        if (ptr_ != nullptr)\n",
        "            delete[] ptr_;\n",
        "\n",
        "        ptr_ = bufferNew;\n",
        "        capacity_ = size;\n",
        "    }\n",
        "\n",
        "    void clear()\n",
        "    {\n",
        "        if (ptr_ != nullptr)\n",
        "            delete[] ptr_;\n",
        "        ptr_ = nullptr;\n",
        "        size_ = 0;\n",
        "        capacity_ = 0;\n",
        "    }\n",
        "\n",
        "    int size() const\n",
        "    {\n",
        "        return size_;\n",
        "    }\n",
        "\n",
        "    int capacity()\n",
        "    {\n",
        "        return capacity_;\n",
        "    }\n",
        "\n",
        "    void push_back(const T& elem)\n",
        "    {\n",
        "        if (size_ >= capacity_)\n",
        "            reserve(capacity_ + 5);\n",
        "\n",
        "        ptr_[size_++] = elem;\n",
        "    }\n",
        "\n",
        "    void pop_back()\n",
        "    {\n",
        "        --size_;\n",
        "    }\n",
        "\n",
        "    T front()\n",
        "    {\n",
        "        if (size_ > 0)\n",
        "            return ptr_[0];\n",
        "        else\n",
        "            throw std::out_of_range(\"Index out of bounds.\");\n",
        "    }\n",
        "\n",
        "    T back()\n",
        "    {\n",
        "        if (size_ > 0)\n",
        "            return ptr_[size_ - 1];\n",
        "        else\n",
        "            throw std::out_of_range(\"Index out of bounds.\");\n",
        "    }\n",
        "};\n",
        "\n",
        "template <typename T>\n",
        "Vector<T> operator+(const Vector<T>& v1, const Vector<T>& v2)\n",
        "{\n",
        "    if (v1.size() != v2.size())\n",
        "        throw std::logic_error(\"Vector lengths must be equal.\");\n",
        "    Vector<T> result;\n",
        "    for (int i{ 0 }; i < v1.size(); ++i)\n",
        "        result.push_back(v1[i] + v2[i]);\n",
        "\n",
        "    return result;\n",
        "}\n",
        "\n",
        "int main()\n",
        "{\n",
        "    Vector<Vector<double>> pts;\n",
        "    pts.reserve(3);\n",
        "    Vector<double> x{1.0, 1.0};\n",
        "    std::cout << \"\\nCheckpoint #1\";\n",
        "    std::cout << \"\\npts->ptr_ = \"<<pts.getRawPointer();\n",
        "    std::cout << \"\\nx->ptr_ = \"<<x.getRawPointer();\n",
        "    pts.push_back(x);\n",
        "    pts.push_back(x + x);\n",
        "    pts.push_back(x);\n",
        "    return 0;\n",
        "}\n",
        "```\n",
        "\n",
        "[Compiler Explorer](https://godbolt.org/z/b48xxeEKM){target=\"_blank\"}\n",
        "\n",
        "Let us look at the individual steps of the program (inspecting both stack and the heap) when we compile this program with a C++ compiler.\n",
        "\n",
        "First in `main`, we create the empty vector `pts` which will be used to store points in the euclidean space $\\mathbf{R}^2$:\n",
        "\n",
        "```\n",
        "Vector<Vector<double>> pts;\n",
        "```\n",
        "\n",
        "which is placed on the stack as an object that has `size_ = 0`, `capacity_ = 0` and no memory allocated for elements.\n",
        "\n",
        "Then, we call \n",
        "\n",
        "```\n",
        "pts.reserve(3);\n",
        "```\n",
        "\n",
        "This allocates memory for `3` elements on the heap. The member `pts_->capacity_` equals `3`, `pts->size_` equals `0` and `pts_->ptr_` contains the address to heap block. The allocated memory is not initialized, because the number of elements is still `0`.\n",
        "\n",
        "Then, we create a $2$-tuple to hold the cartesian coordinates of a point $(1.0,1.0)$. We create a `Vector<double>` initialized to `{1.0,1.0}`. Essentially, we create an object `x` on the stack with its members `x->size_ = 2`, `x->capacity_ = 5` and a pointer `x->ptr_` containing the address of newly allocated memory on the heap for `5` elements. Further, `ptr_[0]=1.0`, `ptr_[1]=1.0`. \n",
        "\n",
        "```\n",
        "Vector<double> x{1.0, 1.0};\n",
        "```\n",
        "\n",
        "After this statement, the program has the following state: we have two objects on the stack : `pts` and `x`. Both of them have memory allocated on the heap. \n",
        "\n",
        "![Checkpoint #1](move_semantics_00.png)\n",
        "\n",
        "The next step is the command to insert `x` into the `pts` vector. \n",
        "\n",
        "```\n",
        "pts.push_back(x);\n",
        "```\n",
        "\n",
        "My toy `Vector` class is said to have value semantics, which means it creates copies of the values passed to it. As a result, we get a first element in the vector, which is a full(deep) copy of the passed value/object `x`:\n",
        "\n",
        "![Checkpoint #2](move_semantics_01.png)\n",
        "\n",
        "The current state is that we have a vector `pts` and two copies of `x={1.0,1.0}`, one of which is the first element in `pts`. \n",
        "\n",
        "Let's now look at the next statement, which creates a new temporary vector and again inserts it into the `pts` vector:\n",
        "\n",
        "```\n",
        "pts.push_back(x + x);\n",
        "```\n",
        "\n",
        "This statement is performed in three steps:\n",
        "\n",
        "*Step 1*. We create a temporary `Vector<double>` object `x + x`. \n",
        "\n",
        "![Step #1](move_semantics_02.png)\n",
        "\n",
        "*Step 2*.  `x+x` is a temporary.  The `Vector<T>::push_back(const T&)` function accepts a reference-to-`const` as an argument. Since `x+x` is a temporary, it cannot be modified and binds to a reference-to-`const`. Moreover, being a temporary object, it is likely to die soon. Referencing it extends the lifetime of the temporary x + x={2.0,2.0}. \n",
        "\n",
        "Now, the statement `pts_[size++] = elem` will invoke the copy-assignment operator on the yet uninitialized second element  `pts[1]` which is of type `Vector<double>`. This will force a full (deep) copy of `x + x={2.0,2.0}`. At this time, two copies of `{2.0,2.0}`  exist on the heap. One of these is assigned to pts[1]. \n"
      ],
      "id": "40df1d9b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | code-fold: true\n",
        "# | code-summary: \"Show the code\"\n",
        "%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n",
        "\\begin{tikzpicture}[x=0.75pt,y=0.75pt,yscale=-1,xscale=1]\n",
        "%uncomment if require: \\path (0,468); %set diagram left start at 0, and has height of 468\n",
        "\n",
        "%Straight Lines [id:da6268999363061931] \n",
        "\\draw    (179.67,22.67) -- (181,459.33) ;\n",
        "%Shape: Rectangle [id:dp19854013107143653] \n",
        "\\draw   (44,51) -- (168.5,51) -- (168.5,120.75) -- (44,120.75) -- cycle ;\n",
        "%Shape: Rectangle [id:dp5840135846204244] \n",
        "\\draw   (41.5,233) -- (166,233) -- (166,302.75) -- (41.5,302.75) -- cycle ;\n",
        "%Shape: Rectangle [id:dp2555444801624851] \n",
        "\\draw  [fill={rgb, 255:red, 254; green, 255; blue, 147 }  ,fill opacity=1 ] (251.5,52.03) -- (360,52.03) -- (360,121) -- (251.5,121) -- cycle ;\n",
        "%Shape: Rectangle [id:dp6472270038953516] \n",
        "\\draw   (248.5,275.25) -- (278,275.25) -- (278,305) -- (248.5,305) -- cycle ;\n",
        "%Shape: Rectangle [id:dp2373984866383141] \n",
        "\\draw   (278,275.25) -- (307.5,275.25) -- (307.5,305) -- (278,305) -- cycle ;\n",
        "%Shape: Rectangle [id:dp3986501691309581] \n",
        "\\draw   (307.5,275.25) -- (337,275.25) -- (337,305) -- (307.5,305) -- cycle ;\n",
        "%Shape: Rectangle [id:dp5810105569962378] \n",
        "\\draw   (337,275.25) -- (366.5,275.25) -- (366.5,305) -- (337,305) -- cycle ;\n",
        "%Shape: Rectangle [id:dp6231112988693166] \n",
        "\\draw   (366.5,275.25) -- (396,275.25) -- (396,305) -- (366.5,305) -- cycle ;\n",
        "%Straight Lines [id:da9496626817348288] \n",
        "\\draw    (162.5,289.03) -- (246,289.24) ;\n",
        "\\draw [shift={(249,289.25)}, rotate = 180.14] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Straight Lines [id:da5923792101660912] \n",
        "\\draw    (162,103.03) -- (248,103.24) ;\n",
        "\\draw [shift={(251,103.25)}, rotate = 180.14] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Shape: Rectangle [id:dp8713965097719767] \n",
        "\\draw   (206.5,155.75) -- (236,155.75) -- (236,185.5) -- (206.5,185.5) -- cycle ;\n",
        "%Shape: Rectangle [id:dp1075315862888877] \n",
        "\\draw   (236,155.75) -- (265.5,155.75) -- (265.5,185.5) -- (236,185.5) -- cycle ;\n",
        "%Shape: Rectangle [id:dp07569442314741215] \n",
        "\\draw   (265.5,155.75) -- (295,155.75) -- (295,185.5) -- (265.5,185.5) -- cycle ;\n",
        "%Shape: Rectangle [id:dp015519266538059684] \n",
        "\\draw   (295,155.75) -- (324.5,155.75) -- (324.5,185.5) -- (295,185.5) -- cycle ;\n",
        "%Shape: Rectangle [id:dp8513271554424788] \n",
        "\\draw   (324.5,155.75) -- (354,155.75) -- (354,185.5) -- (324.5,185.5) -- cycle ;\n",
        "%Straight Lines [id:da9509465887546247] \n",
        "\\draw    (273.5,120.53) -- (273.5,152.25) ;\n",
        "\\draw [shift={(273.5,155.25)}, rotate = 270] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Shape: Rectangle [id:dp738771859520734] \n",
        "\\draw   (43.5,335.67) -- (168,335.67) -- (168,405.42) -- (43.5,405.42) -- cycle ;\n",
        "%Straight Lines [id:da8919822087320273] \n",
        "\\draw    (164.5,387.7) -- (248,387.91) ;\n",
        "\\draw [shift={(251,387.92)}, rotate = 180.14] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Shape: Rectangle [id:dp05261270143272889] \n",
        "\\draw   (252.5,371.92) -- (282,371.92) -- (282,401.67) -- (252.5,401.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp20628248058788512] \n",
        "\\draw   (282,371.92) -- (311.5,371.92) -- (311.5,401.67) -- (282,401.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp8880353993167662] \n",
        "\\draw   (311.5,371.92) -- (341,371.92) -- (341,401.67) -- (311.5,401.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp04563401463090777] \n",
        "\\draw   (341,371.92) -- (370.5,371.92) -- (370.5,401.67) -- (341,401.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp0706714368117467] \n",
        "\\draw   (370.5,371.92) -- (400,371.92) -- (400,401.67) -- (370.5,401.67) -- cycle ;\n",
        "%Straight Lines [id:da5742980804835596] \n",
        "\\draw    (477.5,-73.3) -- (561,-73.09) ;\n",
        "\\draw [shift={(564,-73.08)}, rotate = 180.14] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Shape: Rectangle [id:dp260318587360455] \n",
        "\\draw   (323.5,204.92) -- (353,204.92) -- (353,234.67) -- (323.5,234.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp48320277504224607] \n",
        "\\draw   (353,204.92) -- (382.5,204.92) -- (382.5,234.67) -- (353,234.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp40501271297605923] \n",
        "\\draw   (382.5,204.92) -- (412,204.92) -- (412,234.67) -- (382.5,234.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp1126108056319195] \n",
        "\\draw   (412,204.92) -- (441.5,204.92) -- (441.5,234.67) -- (412,234.67) -- cycle ;\n",
        "%Shape: Rectangle [id:dp6384978108368102] \n",
        "\\draw   (441.5,204.92) -- (471,204.92) -- (471,234.67) -- (441.5,234.67) -- cycle ;\n",
        "%Straight Lines [id:da7399777449734068] \n",
        "\\draw    (390.5,122.53) -- (390.02,202.06) ;\n",
        "\\draw [shift={(390,205.06)}, rotate = 270.35] [fill={rgb, 255:red, 0; green, 0; blue, 0 }  ][line width=0.08]  [draw opacity=0] (8.93,-4.29) -- (0,0) -- (8.93,4.29) -- cycle    ;\n",
        "%Shape: Rectangle [id:dp2970344146912638] \n",
        "\\draw  [fill={rgb, 255:red, 254; green, 255; blue, 147 }  ,fill opacity=1 ] (360,52.03) -- (468.5,52.03) -- (468.5,121) -- (360,121) -- cycle ;\n",
        "%Shape: Rectangle [id:dp14928679177976534] \n",
        "\\draw  [fill={rgb, 255:red, 255; green, 255; blue, 255 }  ,fill opacity=1 ] (468.5,52.03) -- (577,52.03) -- (577,121) -- (468.5,121) -- cycle ;\n",
        "\n",
        "% Text Node\n",
        "\\draw (95,27.9) node [anchor=north west][inner sep=0.75pt]    {$pts$};\n",
        "% Text Node\n",
        "\\draw (50,55) node [anchor=north west][inner sep=0.75pt]   [align=left] {size\\_ = 0};\n",
        "% Text Node\n",
        "\\draw (50,74.5) node [anchor=north west][inner sep=0.75pt]   [align=left] {capacity\\_ = 3};\n",
        "% Text Node\n",
        "\\draw (49,95.5) node [anchor=north west][inner sep=0.75pt]   [align=left] {ptr\\_ = 0x742578};\n",
        "% Text Node\n",
        "\\draw (96.5,211.4) node [anchor=north west][inner sep=0.75pt]    {$x$};\n",
        "% Text Node\n",
        "\\draw (47.5,237) node [anchor=north west][inner sep=0.75pt]   [align=left] {size\\_ = 2};\n",
        "% Text Node\n",
        "\\draw (47.5,256.5) node [anchor=north west][inner sep=0.75pt]   [align=left] {capacity\\_ = 5};\n",
        "% Text Node\n",
        "\\draw (48.5,276.5) node [anchor=north west][inner sep=0.75pt]   [align=left] {ptr\\_ = 0x53d6d0};\n",
        "% Text Node\n",
        "\\draw (84.5,5.9) node [anchor=north west][inner sep=0.75pt]    {$Stack$};\n",
        "% Text Node\n",
        "\\draw (251.5,281.5) node [anchor=north west][inner sep=0.75pt]   [align=left] {1.0};\n",
        "% Text Node\n",
        "\\draw (280.5,281.25) node [anchor=north west][inner sep=0.75pt]   [align=left] {1.0};\n",
        "% Text Node\n",
        "\\draw (367,8.9) node [anchor=north west][inner sep=0.75pt]    {$Heap$};\n",
        "% Text Node\n",
        "\\draw (256,58) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {size\\_ = 2};\n",
        "% Text Node\n",
        "\\draw (256,77.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {capacity\\_ = 5};\n",
        "% Text Node\n",
        "\\draw (257,97.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {ptr\\_ =0x1df1ab0};\n",
        "% Text Node\n",
        "\\draw (209.5,162) node [anchor=north west][inner sep=0.75pt]   [align=left] {1.0};\n",
        "% Text Node\n",
        "\\draw (238.5,161.75) node [anchor=north west][inner sep=0.75pt]   [align=left] {1.0};\n",
        "% Text Node\n",
        "\\draw (87.83,315.4) node [anchor=north west][inner sep=0.75pt]    {$x+x$};\n",
        "% Text Node\n",
        "\\draw (49.5,339.67) node [anchor=north west][inner sep=0.75pt]   [align=left] {size\\_ = 2};\n",
        "% Text Node\n",
        "\\draw (49.5,359.17) node [anchor=north west][inner sep=0.75pt]   [align=left] {capacity\\_ = 5};\n",
        "% Text Node\n",
        "\\draw (50.5,379.17) node [anchor=north west][inner sep=0.75pt]   [align=left] {ptr\\_ = 0x53d6d0};\n",
        "% Text Node\n",
        "\\draw (255.5,378.17) node [anchor=north west][inner sep=0.75pt]   [align=left] {2.0};\n",
        "% Text Node\n",
        "\\draw (284.5,377.92) node [anchor=north west][inner sep=0.75pt]   [align=left] {2.0};\n",
        "% Text Node\n",
        "\\draw (326.5,211.17) node [anchor=north west][inner sep=0.75pt]   [align=left] {2.0};\n",
        "% Text Node\n",
        "\\draw (355.5,210.92) node [anchor=north west][inner sep=0.75pt]   [align=left] {2.0};\n",
        "% Text Node\n",
        "\\draw (368,58) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {size\\_ = 2};\n",
        "% Text Node\n",
        "\\draw (368,77.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {capacity\\_ = 5};\n",
        "% Text Node\n",
        "\\draw (369,97.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {ptr\\_ =0x1df1ab8};\n",
        "% Text Node\n",
        "\\draw (473,57) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {size\\_ = 0};\n",
        "% Text Node\n",
        "\\draw (473,76.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {capacity\\_ = 0};\n",
        "% Text Node\n",
        "\\draw (475,96.5) node [anchor=north west][inner sep=0.75pt]  [font=\\small] [align=left] {ptr\\_ =nullptr};\n",
        "\\end{tikzpicture}"
      ],
      "id": "903e63db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "*Step 3*. When `push_back(const T&)` returns, the temporary `x + x` will die and its destructor is called and the memory allocated on the heap is freed.\n",
        "\n",
        "Our code is clearly not performing well: we create a copy of the temporary `x + x` and destroy the source of the copy immediately afterwards, which means we unnecessarily allocate and free memory that we could have just moved from source to the copy.\n",
        "\n",
        "![Step #3](move_semantics_04.png)\n",
        "\n",
        "With the next statement, again we insert `x` into `pts`:\n",
        "\n",
        "```\n",
        "pts.push_back(x)\n",
        "```\n",
        "\n",
        "Again, `pts` copies `x`.\n"
      ],
      "id": "d8669f8e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}