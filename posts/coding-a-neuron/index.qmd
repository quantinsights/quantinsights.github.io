---
title: "Coding a neuron"
author: "Quasar"
date: "2024-05-28"
categories: [Machine Learning]      
image: "image.jpg"
toc: true
toc-depth: 3
---

## Introduction

In 1943, McCulloch and Pitts introduced artificial intelligence to the world. Their idea was to develop an algorithmic approach to mimic the functionality of the human brain. Due to the structure of the brain consisting of a net of neurons, they introduced the so-called *artificial neurons* as building blocks.

 In it's most simple form, the neuron consists of :

- dendrites, which receive the information from other neurons
- soma, which processes the information
- synapse, transmits the output of this neuron
- axon, point of connection to other neurons

Consequently, a mathematical definition of an artificial neuron is as follows. 

*Definition.* An *artificial neuron* with weights $w_1,\ldots,w_n \in \mathbf{R}$, bias $b\in\mathbf{R}$ and an activation function $\rho:\mathbf{R} \to \mathbf{R}$ is defined as the scalar-valued function $f:\mathbf{R}^n \to \mathbf{R}$ given by:

\begin{align*}
f(x_1,\ldots,x_n) = \rho \left(\sum_{i=1}^{n}w_i x_i + b\right) = \rho(\mathbf{w}^T \mathbf{x}+b) \tag{1}
\end{align*}

where $\mathbf{w} = (w_1,\ldots,w_n)$ and $\mathbf{x}=(x_1,\ldots,x_n)$.

A single neuron by itself is useless, but when combined with hundreds or thousands(or many more) of other neurons, the interconnectivity can approximate any complex function and frequently outperforms any other machine learning methods.

```{python}
%load_ext itikz
```

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}
\foreach \i in {1,2}
{
    \node[circle, 
        minimum size = 15mm,
        fill=red!30
        ] (Input-\i) at (0,-\i * 2) {\large $x_\i$};
}
\foreach \i in {1,2,...,5}
{
    \node[circle, 
        minimum size = 15mm,
        fill=blue!50,
        yshift=30 mm
        ] (Hidden1-\i) at (3.0,-\i * 2) {\large $h_\i^{(1)}$};
        
}
\foreach \i in {1,2,...,5}
{
    \node[circle, 
        minimum size = 15mm,
        fill=blue!50,
        yshift=30 mm
        ] (Hidden2-\i) at (6.0,-\i * 2) {\large $h_\i^{(2)}$};
}
\foreach \i in {1,2}
{
    \node[circle, 
        minimum size = 15mm,
        fill=green!30] (Output-\i) at (9.0,-\i * 2) {\large $\hat{y}_\i$};
}

% Connect neurons In-Hidden1
\foreach \i in {1,...,2}
{
    \foreach \j in {1,...,5}
    {
        \draw[->, shorten >=1pt] (Input-\i) -- (Hidden1-\j);   
    }
}
\foreach \i in {1,...,5}
{
    \foreach \j in {1,...,5}
    {
        \draw[->, shorten >=1pt] (Hidden1-\i) -- (Hidden2-\j);   
    }
}
\foreach \i in {1,...,5}
{
    \foreach \j in {1,2}
    {
        \draw[->, shorten >=1pt] (Hidden2-\i) -- (Output-\j);   
    }
}
\end{tikzpicture}
```

Dense layers, the most common layers, consist of interconnected neurons. In a dense layer, each neuron of a given layer is connected to every neuron of the next layer, which means its output value becomes an input for the next neurons. Each connection between neurons has a weight associated with it, which is a trainable factor of how much of this input to use. Once all of the $\text{inputs} \cdot \text{ weights}$ flow into our neuron, they are summed and a bias, another trainable parameter is added.

Say, we have an input $x_1$ and weight $w_1$, then the output $y_1 = w_1 x_1$ is a straight-line with slope $w_1$. 

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}[scale=1.5]
\begin{axis}
\addplot[color=blue]{x};
\addlegendentry{\(f(x)=x\)}
\addplot[color=red]{2*x};
\addlegendentry{\(f(x)=2x\)}
\end{axis}
\end{tikzpicture}
```

The bias offsets the overall function. 

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}[scale=1.5]
\begin{axis}
\addplot[color=black]{x+1};
\addlegendentry{\(f(x)=x+1\)}
\addplot[color=gray]{x-1};
\addlegendentry{\(f(x)=x-1\)}
\end{axis}
\end{tikzpicture}
```

### Activation functions

Let us now look at some examples of activation functions. 

The heaviside function is defined as:

\begin{align*}
\rho(x) &= 
\begin{cases}
1, & x > 0 \\
0, & x \leq 0
\end{cases}
\end{align*}

The sigmoid function is defined as:

\begin{align*}
\rho(x) &= \frac{1}{1+e^{-x}}
\end{align*}

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}[scale=1.5]
\begin{axis}
\addplot[color=black]{1/(1+exp(-x))};
\end{axis}
\end{tikzpicture}
```

The Rectifiable Linear Unit (ReLU) function is defined as:

\begin{align*}
\rho(x) &= \max(0,x)
\end{align*}

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}[scale=1.5]
\begin{axis}
\addplot[color=black]{max(0,x)};
\end{axis}
\end{tikzpicture}
```

## Coding a layer with 3-neurons

Let's code a simple layer with $n=3$ neurons.

```{python}
inputs = [1, 2, 3, 2.5]
weights = [[0.2, 0.8, -0.5, 1.0], [0.5, -0.91, 0.26, -0.5], [-0.26, -0.27, 0.17, 0.87]]

biases = [2, 3, 0.5]

# Output of the current layer
layer_outputs = []

# For each neuron
for neuron_weights, neuron_bias in zip(weights, biases):
    # zeroed output of the neuron
    neuron_output = 0.0
    # for each input and weight to the neuron
    for input, weight in zip(inputs, neuron_weights):
        # multiply this input with the associated weight
        # and add to the neuron's output variable
        neuron_output += input * weight
    # Add bias
    neuron_output += neuron_bias
    # Put the neuron's result to the layer's output list
    layer_outputs.append(neuron_output)

print(layer_outputs)
```

We can achieve the same results as in our pure Python implementation of multiplying each component in our input vector $\mathbf{x}$ and weights vector $\mathbf{w}$ element-wise, by taking an inner product $\mathbf{w} \cdot \mathbf{x}$. 

```{python}
import numpy as np

inputs = [1, 2, 3, 2.5]
weights = [
    [0.2, 0.8, -0.5, 1.0], 
    [0.5, -0.91, 0.26, -0.5], 
    [-0.26, -0.27, 0.17, 0.87]
]

biases = [2, 3, 0.5]

# Output of the current layer
layer_outputs = np.dot(weights, inputs) + biases

print(layer_outputs)
```

To train, neural networks tend to receive data in *batches*. So far, the example input data has only one sample (or observation) of various features called a feature set instance:

```python
sample = [1, 2, 3, 2.5]
```

Often, neural networks expect to take in many *samples* at a time. One reason is its faster to train in batches in parallel processing. Also, if you fit on one sample at a time, you're highly likely to keep fitting to that individual sample, rather than slowly producing general tweaks to the weights and biases that fit the entire dataset. Fitting or training in batches gives you a higher chance of making more meaningful changes to weights and biases.

## A layer of neurons and a batch of data

Currently, the weights matrix looks as follows:

\begin{align*}
W = \begin{bmatrix}
0.2 & 0.8 & -0.5 & 1.0 \\
0.5 & -0.91 & 0.26 & -0.5 \\
-0.26 & -0.27 & 0.17 & 0.87
\end{bmatrix}
\end{align*}

And say, that we have a batch of inputs:

\begin{align*}
X = \begin{bmatrix}
1.0 & 2.0 & 3.0 & 3.5 \\
2.0 & 5.0 & -1.0 & 2.0\\
-1.5 & 2.7 & 3.3 & -0.8
\end{bmatrix}
\end{align*}

We need to take the inner products $(1.0, 2.0, 3.0, 3.5) \cdot (0.2, 0.8, -0.5, 1.0)$, $(2.0, 5.0, -1.0, 2.0) \cdot (0.2, 0.8, -0.5, 1.0)$ and $(-1.5, 2.7, 3.3, -0.8) \cdot (0.2, 0.8, -0.5, 1.0)$ for the first neuron.

We need to take the inner products $(1.0, 2.0, 3.0, 3.5) \cdot (0.5, -0.91, 0.26, -0.5)$, $(2.0, 5.0, -1.0, 2.0) \cdot (0.5, -0.91, 0.26, -0.5)$ and $(-1.5, 2.7, 3.3, -0.8) \cdot (0.5, -0.91, 0.26, -0.5)$ for the second neuron.

And so forth. 

Consider the matrix product $XW^T$:

\begin{align*}
XW^T &= \begin{bmatrix}
1.0 & 2.0 & 3.0 & 2.5 \\
2.0 & 5.0 & -1.0 & 2.0\\
-1.5 & 2.7 & 3.3 & -0.8
\end{bmatrix} 
\begin{bmatrix}
0.2 & 0.5 & -0.26 \\
0.8 & -0.91 & -0.27 \\
-0.5 & 0.26 & 0.17 \\
1.0 & -0.5 & 0.87
\end{bmatrix}\\
&= \begin{bmatrix}
2.8 & -1.79 & 1.885 \\
6.9 & -4.81 & -0.3 \\
-0.59 & -1.949 & -0.474
\end{bmatrix}
\end{align*}

```{python}
import numpy as np

X = [
    [1.0, 2.0, 3.0, 2.5],
    [2.0, 5.0, -1.0, 2.0],
    [-1.5, 2.7, 3.3, -0.8]
]

W = [
    [0.2, 0.8, -0.5, 1.0],
    [0.5, -0.91, 0.26, -0.5],
    [-0.26, -0.27, 0.17, 0.87]
]

np.dot(X,np.array(W).T)
```

So, we can process a batch of inputs as:

```{python}
layer_outputs = np.dot(X,np.array(W).T) + biases
print(layer_outputs)
```

The second argument for `np.dot()` is going to be our transposed weights. Before, we were computing the neuron output using a single sample of data, but now we've taken a step forward where we model the layer behavior on a batch of data.

## Adding Layers

The neural network we have built is becoming more respectable, but at the moment, we have only one layer. Neural networks become deep when they have $2$ or more *hidden layers*. At the moment, we have just one layer, which is effectively an output layer. Why we want two or more hidden layers will become apparent later on. Currently, we have no hidden layers. A hidden layer isn't an input or output layer; as the scientist, you see the data as they are handed to the input layer and the resulting data from the output layer. Layers between these endpoints have values that we don't necessarily deal with, and hence the name "hidden". Don't let this name convince you that you can't access these values, though. You will often use them to diagnose issues or improve your neural network. To explore this concept, let's add another layer to this neural network, and for now, let's assume that these two layers that we're going to have will be hidden layers, and we just coded our output layer yet. 

Before we add another layer, let's think about what's coming. In the case of the first layer, we can see that we have an input with $4$ features. 

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}
\foreach \i in {1,2,...,4}
{
    \node[circle, 
        minimum size = 15mm,
        fill=red!30
        ] (Input-\i) at (0,-\i * 2) {\large $x_\i$};
}
\foreach \i in {1,2,...,3}
{
    \node[circle, 
        minimum size = 15mm,
        fill=blue!50,
        yshift=-10 mm
        ] (Hidden1-\i) at (3.0,-\i * 2) {\large $h_\i^{(1)}$};
        
}

% Connect neurons In-Hidden1
\foreach \i in {1,...,4}
{
    \foreach \j in {1,...,3}
    {
        \draw[->, shorten >=1pt] (Input-\i) -- (Hidden1-\j);   
    }
}
\end{tikzpicture}
```

Samples(feature set data) get fed through the input, which does not change it in any way, to our first hidden layer, which we can see has $3$ sets of weights with $4$ values each. 

Each of those $3$ unique weight sets is associated with its distinct neuron. Thus, since we have $3$ weight sets, we have $3$ neurons in the first hidden layer. Each neuron has a unique set of weights, of which we have $4$ (as there are $4$ inputs to this layer), which is why our initial weights have a shape of $(3,4)$.

Now we wish to add another layer. To do that, we must make sure that the expected input to that layer matches the previous layer's output. We have set the number of neurons in a layer by setting how many weights and biases we have. The previous layer's influence on weight sets for the current layer is that each weight set needs to have a separate weight per input. This means a distinct weight per neuron from the previous layer (or feature if we're talking the input). The previous layer has $3$ weight sets and $3$ biases, so we know it has $3$ neurons. This then means, for the next layer, we can have as many weight sets as we want (because this is how many neurons this new layer will have), but each of those weight sets must have $3$ discrete weights. 

To create this new layer, we are going to copy and paste our `weights` and `biases` to `weights2` and `biases2`, and change their values to new made up sets. Here's an example:

```{python}
inputs = [
    [1, 2, 3, 2.5],
    [2.0, 5.0, -1.0, 2],
    [-1.5, 2.7, 3.3, -0.8]
]

weights = [
    [0.2, 0.8, -0.5, 1],
    [0.5, -0.91, 0.26, -0.5],
    [-0.26, -0.27, 0.17, 0.87]
]

biases = [2, 3, 0.5]

weights2 = [
    [0.1, -0.14, 0.5],
    [-0.5, 0.12, -0.33],
    [-0.44, 0.73, -0.13]
]

biases2 = [-1, 2, -0.5]
```

Next, we will now call the outputs `layer1_outputs`. 

```{python}
layer1_outputs = np.dot(inputs, np.array(weights).T) + biases
```

As previously stated, inputs to the layers are either inputs from the actual dataset you're training with, or outputs from a previous layer. That's why we defined $2$ versions of `weights` and `biases`, but only one of `inputs`. 

```{python}
layer2_outputs = np.dot(layer1_outputs, np.array(weights2).T) + biases2
```

At this point, our neural network could be visually represented as:

```{python}
# | code-fold: true
# | code-summary: "Show the code"
%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone
\begin{tikzpicture}
\foreach \i in {1,2,...,4}
{
    \node[circle, 
        minimum size = 15mm,
        fill=red!30
        ] (Input-\i) at (0,-\i * 2) {\large $x_\i$};
}
\foreach \i in {1,2,...,3}
{
    \node[circle, 
        minimum size = 15mm,
        fill=blue!50,
        yshift=-10 mm
        ] (Hidden1-\i) at (3.0,-\i * 2) {\large $h_\i^{(1)}$};
        
}
\foreach \i in {1,2,...,3}
{
    \node[circle, 
        minimum size = 15mm,
        fill=blue!50,
        yshift=-10 mm
        ] (Hidden2-\i) at (6.0,-\i * 2) {\large $h_\i^{(2)}$};
        
}

% Connect neurons In-Hidden1
\foreach \i in {1,...,4}
{
    \foreach \j in {1,...,3}
    {
        \draw[->, shorten >=1pt] (Input-\i) -- (Hidden1-\j);   
    }
}
% Connect neurons Hidden1-Hidden2
\foreach \i in {1,...,3}
{
    \foreach \j in {1,...,3}
    {
        \draw[->, shorten >=1pt] (Hidden1-\i) -- (Hidden2-\j);   
    }
}
\end{tikzpicture}
```

## Training Data

Next, rather than hand-typing in random data, we'll use a function that can create non-linear data. What do we mean by non-linear? Linear data can be fit or represented by a straight line. Non-linear data cannot be represented well by a straight line. 

We shall use the python package `nnfs` to create data. You can install it with

```
pip install nnfs
```

You typically don't generate training data from a package like `nnfs` for your neural networks. Generating a dataset this way is purely for convenience at this stage. I shall also use this package to ensure repeatability.

```{python}
import numpy as np
import nnfs

nnfs.init()
```

The `nnfs.init()` does three things: it sets the random seed to $0$ by default, creates a `float32` dtype default and overrides the original dot product from `numpy`. All of these are meant to ensure repeatable results for following along. 

```{python}
from nnfs.datasets import spiral_data
import matplotlib.pyplot as plt

X, y = spiral_data(samples=100, classes=3)

plt.scatter(X[:,0], X[:,1])
plt.show()
```

The `spiral_data` function allows us to create a dataset with as many classes as we want. The function has parameters to choose the number of classes and the number of points/observations per class in the resulting non-linear dataset. 

If you trace from the center, you can determine all $3$ classes separately, but this is a very challenging problem for a machine learning classifier to solve. Adding color to the chart makes this more clear:

```{python}
plt.scatter(X[:,0],X[:,1],c=y,cmap='brg')
plt.show()
```

Keep in mind that the neural network will not be aware of the color differences as the data have no class encodings. This is only made as an instruction for you. In the data above, each dot is an observation, that is, it's coordinates are the samples that form the dataset. The classification for the dot has to do with which spiral it is a part of, depicted by red, blue or green color. 

## Dense Layer Class

Now that we no longer need to hand-type our data, we should create something similar for our various types of neural network layers. So far, we've only used what's called a **dense** or **fully-connected** layer. These layers are commonly referred to as dense layers in papers, literature and code, but you will see them called fully-connected or fc for short in the code I write. Our dense layer class begins with two methods:

```{python}
class LayerDense:
    def __init__(self, n_inputs, n_neurons):
        # Initialize weights and biases
        pass # using pass statement as a placeholder

    # Forward pass
    def forward(self, inputs):
        # Calculate output values from inputs, weights and biases
        pass # using pass statement as a placeholder
```

Weights are often initialized randomly for a model, but not always. If you wish to load a pre-trained model, you will initialize the parameters to whatever that pretrained model finished with. It's also possible that, even for a new model, you have some other initialization rules besides random. From now, we'll stick with random initialization. Next, we have the `forward` method. When we pass data through a model from beginning to end, this is called a **forward** pass. Just like everything else, this is not the only way to do things. You can have the data loop back around and do other interesting things. We'll keep it usual and perform a regular forward pass.

To continue the `LayerDense` class code, let's add the random initialization of weights and biases:

```python
#Layer initialization
def __init__(self,n_inputs, n_neurons):
    self.weights = 0.01 * np.random.randn(n_inputs,n_neurons)
    self.biases = np.zeros((1,n_neurons))
```

Here, we are setting the weights to be random and the biases to be $0$. Note that, we are initializing weights to be a matrix of dimensions $n_{inputs} \times n_{neurons}$, rather than $n_{neurons} \times n_{inputs}$. We're doing this ahead instead of transposing everytime we perform a forward pass, as explained in the previous chapter. 

We initialize the biases to zero, because with many samples containing values of $0$, it will ensure that a neuron fires initially. The most common initialization for biases is zero. This will vary depending on our use-case and is just one of the many things we can tweak when trying to improve results. One situation where we might want to try something else is with what's called *dead neurons*. 

Imagine our step function again:

\begin{align*}
y = \begin{cases}
1, & x > 0\\
0, & x \leq 0
\end{cases}
\end{align*}

It's possible for $\text{weights} \cdot \text{inputs} + \text{biases}$ not to meet the threshold of the step function, which means the neuron will output a zero. On its own, this is not a big issue, but it becomes a problem if this happens to this neuron for every one of the input samples (it'll become clear why once we learn about backpropogation). So, then this neuron's $0$ output is the input to another neuron. Any weight multiplied by zero will be zero. With an increasing number of neurons outputting $0$, more inputs to the next neurons will be zeros, rendering the network essentially non-trainable or *dead*. 

On to our `forward` method now. 

```{python}
class LayerDense:
    def __init__(self, n_inputs, n_neurons):
        self.weights = 0.01 * np.random.randn(n_inputs,n_neurons)
        self.biases = np.zeros((1,n_neurons))

    def forward(self,inputs):
        self.output = np.dot(inputs,self.weights) + self.biases
```

We are now ready to make use of this new class instead of hardcoded calculations, so let's generate some data using the discussed dataset creation method and use our new layer to perform a forward pass:

```{python}
# Create dataset
X, y = spiral_data(samples = 100, classes=3)

# Create a dense layer with 2 input features and 3 output values
dense1 = LayerDense(2, 3)

# Perform a forward pass of our training data through this layer
dense1.forward(X)

# Let's see the output of the first few samples
print(dense1.output[:5])
```

## Activation Functions

We use activation functions because if the activation function itself is non-linear, it allows for neural networks with two or more layers to map non-linear functions. We'll see how this works. In general, your neural network will have $2$ types of activation functions. The first will be the activation function used in hidden layers, and the second will be used in the output layer. Usually, the activation function used for hidden neurons will be all the same for all of them, but it doesn't have to.

### Why use activation functions?

Let's discuss why we use activation functions in the first place? In most cases, for a neural network to fit a non-linear function, we need it to contain two or more hidden layers and we need those hidden layers to use a non-linear activation function.

While 

