---
title: "Concurrent programming - A Primer (Part I)"
author: "Quasar"
date: "2024-09-28"
categories: [C++]      
image: "cpp.jpg"
toc: true
toc-depth: 3
format:
    html:
        code-tools: true
        code-block-border-left: true
        code-annotations: below
        highlight-style: pygments
---

## Basic Thread Management

A thread `std::thread` represents an executable unit. This executable unit, which the thread immediately starts, gets its work-package as a *callable unit*. A thread is not copy-constructible or copy-assignable, but move-constructible and move-assignable. A *callable unit* is any entity that behaves like a function, so this could be a function, a function pointer, a lambda function or `std::function` (function) object. 

For example:

```cpp
#include <iostream>
#include <thread>

void do_some_work()
{
    std::cout << "\nPerforming some work in a separate thread...";
}

int main()
{
    std::cout << "\nmain() thread";
    std::thread t(do_some_work);      // Spawn a new thread
    t.join();
    std::cout << "\nExiting main() thread";
    return 0;
}
```

stdout:
```
main() thread
Performing some work in a separate thread...
Exiting main() thread
```

Once you've started your thread, you need to explicitly decide whether to wait for it to finish(by joining with it) or leave it to run on its own (by detaching it). If you don't decide before the `std::thread` object goes out of scope and is destroyed, then your program is terminated (the `std::thread` destructor calls `std::terminate()`). So, ensure that the thread is correctly joined or detached. You only have to make this decision before the `std::thread` object is destroyed - the thread itself may well have finished before you join with it or detach it, and if you detach it, then if the thread is still running, it will continue to do so, and may continue running long after the `std::thread` object is destroyed; it will only stop running when it finally returns from the thread function. 

Passing arguments is easy. If the function signature is `void func(int arg1, std::vector<double> arg2, char arg3)`, you just specify the comma separated list in the `std::thread()` constructor, as `std::thread my_thread(func, arg1, arg2, arg3)`. This copies the value of the parameters `arg1`, `arg2` and `arg3` onto the thread stack. It's a *pass-by-value*. To pass by reference, you `std::ref()` the arguments, so for example, if the function signature is `void func(int arg1, std::vector<double>& arg2, char arg3)`, while spawning a new thread, you'd write `std::thread my_thread(func, arg1, std::ref(arg2), arg3)`.

If you don't wait for the thread to finish in the `main()` thread, you need to ensure that the data accessed by the thread is valid until the thread is finished with it. This isn't a new problem - even in single threaded code it's undefined behavior to access an object after it's been destroyed - but the use of threads provides another opportunity to encounter such lifetime issues. 

One situation in which you can encounter such problems is when the thread function holds pointers or references to local variables and the thread hasn't finished when the function exits. 

```cpp
#include <iostream>
#include <thread>

void do_some_work(int& i)
{
    std::cout << "\nThe value of i is = " << i; //Potential access to dangling reference
    std::cout << "\nIncrementing the value of i";
    ++i;
    std::cout << "\nThe new value of i = " << i;
}

int main()
{
    std::cout << "\nmain() thread";
    int i{1};
    std::thread my_thread(do_some_work, std::ref(i)); // Spawn a new thread
    my_thread.detach(); // Don't wait for the thread to finish
    std::cout << "\nExiting main() thread"; //New thread might still be running
    return 0;
}
```

stdout:
```
main() thread
Exiting main() thread
```

In this case, the new thread associated with `my_thread` is still running when `main()` exits, because you explicitly decided not to wait for it by calling `detach()`. If the thread is still running, the statements in `do_some_work(int& )`  will access an already destroyed variable `i`. This is like normal single-threaded code - allowing a pointer or reference to a local variable to persist beyond the function exit, which is never a good idea. But, it's easier to make this mistake with multi-threaded code, because it isn't immediately apparent that this has happened.

### Waiting for a thread to complete

If you need to wait for a thread to complete, you do this by calling `join()` on the associated `std::thread` instance. In the previous listing, replacing the call to `my_thread.detach()` by `my_thread.join()` would therefore be sufficient to ensure that the thead was finished before the function was exited and thus before the local variables were destroyed. In real code, the original thread would either have work to do or would have launched several threads to do useful work before waiting for them to complete. 

`join()` is a simple and brute-force technique - either you wait for a thread to finish or you don't. If you need more fine-grained control over waiting for a thread, such as to check whether a thread is finished, or wait only a certain period of time, then you have to use alternative mechanisms such as condition variables and futures. 

### Waiting in exceptional circumstances

You need to ensure that you've called either `join()` or `detach()` before a `std::thread` object is destroyed. If you're detaching a thread, you can usually call `detach()` immediately after the thread has been started, so this isn't a problem. But, if you're intending to wait for a thread, you need to carefully pick the place in the code where you call `join()`. This means that the call to `join()` is liable to be skipped if an exception is thrown after the thread has been started but before the call to `join()`. 

To avoid your application being terminated when an exception is thrown, you need to make a decision about what to do in this case. In general, if you were intending to call `join()` in a non-exceptional case, you also need to call `join()` in the presence of an exception to avoid accidental lifetime problems.

```cpp
#include <iostream>
#include <thread>
#include <stdexcept>
#include <string>

int main()
{
    int i {1};

    auto my_func = [&i](){
        for(int j{0};j<10000000;++j)
        {
            ++i;
        }
        std::cout << "\nt's work package is complete." << std::flush;

    };

    std::cout << "main thread" << std::flush;
    std::thread t(my_func);
    try
    {
        std::string("abc").substr(10); // throws std::out_of_range
    }
    catch (const std::exception& e)
    {
        std::cout << "\n" << e.what();
        t.join();
        throw e; // copy-initializes a new exception object of type std::exception
    }

    t.join();
    return 0;
}
```

stdout:
```
main thread
invalid string position
t's work package is complete.
```

The code in the listing above uses `try/catch` block to ensure that a thread with access to the local state is finished before the main thread exits normally, or by an exception. 

A more structured way of doing is to use the standard Resource Aquisition is Initialization(RAII) idiom and provide a wrapper class that does the `join()` in its destructor, as in the following listing:

```cpp
#include <iostream>
#include <thread>
#include <stdexcept>
#include <string>

class thread_guard
{
    private:
    std::thread& m_t;

    public:
    explicit thread_guard(std::thread& t) : m_t{t} {}
    ~thread_guard()
    {
        if(m_t.joinable()){
            m_t.join();
        }
    }

    thread_guard(const thread_guard& _tg) = delete;
    thread_guard& operator=(thread_guard& _tg) = delete;
};

int main()
{
    int i {1};

    auto my_func = [&i](){
        for(int j{0};j<10000000;++j)
        {
            ++i;
        }
        std::cout << "\nt's work package is complete." << std::flush;

    };

    std::cout << "main thread" << std::flush;
    std::thread t(my_func);
    thread_guard g(t);
    try
    {
        std::string("abc").substr(10); // throws std::out_of_range
    }
    catch (const std::exception& e)
    {
        std::cout << "\n" << e.what();
        throw e; // copy-initializes a new exception object of type std::exception
    }

    return 0;
}
```

When the execution of the main thread reaches the end, the local objects are destroyed in the reverse order of their construction. Consequently, the `thread_guard` object id object `g` is destroyed first, and the thread is joined with, which is a blocking call in the destructor. This happens even if there is an exception in the main thread. 

The copy constructor and copy-assignment operators are marked `=delete` to ensure that they're not automatically provided by the compiler. Copying or assigning such an object would be dangerous, because it might outlive the scope of the thread it was joining. By declaring them as as deleted, any attempt to copy a `thread_guard` object will generate a compilation error. 

If you don't need to wait for a thread to finish, you can avoid this exception-safety by detaching from it. This breaks the association of the thread with the `std::thread` object and ensures that `std::terminate()` won't be called when the `std::thread` object is destroyed, even though the thread is still running in the background.

### Running threads in background

Calling `detach()` on a `std::thread` object leaves the thread to run in the background with no direct means of communicating with it. It's no longer possible to wait for that thread to complete; if a thread becomes detached, it isn't possible to obtain a `std::thread` object that references it, so it can no longer be joined. Detached threads truly run in the background; ownership and control are passed over to the C++ runtime library, which ensures that the resources associated with the thread are correctly reclaimed when the thread exits.

Detached threads are often called *daemon threads* after the UNIX concept of a *daemon process* that runs in the background without any explicit user interface. Such threads are typically long-running; they run for almost the entire lifetime of the application, performing a background task such as monitoring the filesystem, clearing unused entries out of object caches, or optimizing data-structures. At the other extreme, it may make sense to use a detached thread where there's another mechanism for identifying when the thread has completed or where the thread is used for a fire-and-forget task. 

As we've seen earlier, we detach a thread by calling `detach()` member function of the `std::thread` object. After the call completes, the `std::thread` object is no longer associated with the actual thread of execution and is therefore no longer joinable. 

In order to detach the thread from a `std::thread` object, there must be a thread to detach: you can't call `detach()` on a `std::thread` object with no associated thread of execution. This is exactly the same requirement for `join()`, and you can check it in the same way - you can call `t.detach()` for a `std::thread` object `t` when `t.joinable()` returns `true`.

Consider an application such as a word-processor that can edit multiple documents at once. There are many ways to handle this, both at the UI level and internally. One way that's increasingly common at the moment is to have multiple, independent, top-level windows, one for each document being edited. Although these windows appear to be completely independent, each with its own menus, they're running within the same instance of the application. One way to handle this internally is to run each document-editing window in its own thread; each thread runs the same code but with different data relating to the document being edited. Opening a new document therefore requires starting a new thread. The thread handling the request isn't going to care about waiting for that other thread to finish, because it's working on an unrelated document, so this makes it a prime candidate for running a detached thread. 

### Passing arguments to a thread function

Passing arguments to the callable object or function is fundamentally as simple as passing additional arguments to the `std::thread` constructor. But, its important to bear in mind that the arguments are copied into internal storage, where they can be accessed by the newly created thread of execution and then passed to the callable function or object as `rvalue`s as if they were temporaries. 

Therefore, if you want to pass an object's member function as a work-package to a thread, you pass the member-function pointer as the function, and an object pointer as the first argument:

```cpp
#include <thread>

class X{
    public do_lengthy_work();
};

int main()
{
    X x;
    std::thread t(&X::do_length_work, &x);
    t.join();
    return 0;
}
```

You can also supply arguments to such a member-function call: the third argument to the `std::thread` constructor will be the first argument to the function, and so forth.