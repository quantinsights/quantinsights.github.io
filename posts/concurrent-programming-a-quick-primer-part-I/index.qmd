---
title: "Concurrent programming - A Primer (Part I)"
author: "Quasar"
date: "2024-09-28"
categories: [C++]      
image: "cpp.jpg"
toc: true
toc-depth: 3
format:
    html:
        code-tools: true
        code-block-border-left: true
        code-annotations: below
        highlight-style: pygments
---

## Basic Thread Management

A thread `std::thread` represents an executable unit. This executable unit, which the thread immediately starts, gets its work-package as a *callable unit*. A thread is not copy-constructible or copy-assignable, but move-constructible and move-assignable. A *callable unit* is any entity that behaves like a function, so this could be a function, a function pointer, a lambda function or `std::function` (function) object. 

For example:

```cpp
#include <iostream>
#include <thread>

void do_some_work()
{
    std::cout << "\nPerforming some work in a separate thread...";
}

int main()
{
    std::cout << "\nmain() thread";
    std::thread t(do_some_work);      // Spawn a new thread
    t.join();
    std::cout << "\nExiting main() thread";
    return 0;
}
```

stdout:
```
main() thread
Performing some work in a separate thread...
Exiting main() thread
```

Once you've started your thread, you need to explicitly decide whether to wait for it to finish(by joining with it) or leave it to run on its own (by detaching it). If you don't decide before the `std::thread` object goes out of scope and is destroyed, then your program is terminated (the `std::thread` destructor calls `std::terminate()`). So, ensure that the thread is correctly joined or detached. You only have to make this decision before the `std::thread` object is destroyed - the thread itself may well have finished before you join with it or detach it, and if you detach it, then if the thread is still running, it will continue to do so, and may continue running long after the `std::thread` object is destroyed; it will only stop running when it finally returns from the thread function. 

Passing arguments is easy. If the function signature is `void func(int arg1, std::vector<double> arg2, char arg3)`, you just specify the comma separated list in the `std::thread()` constructor, as `std::thread my_thread(func, arg1, arg2, arg3)`. This copies the value of the parameters `arg1`, `arg2` and `arg3` onto the thread stack. It's a *pass-by-value*. To pass by reference, you `std::ref()` the arguments, so for example, if the function signature is `void func(int arg1, std::vector<double>& arg2, char arg3)`, while spawning a new thread, you'd write `std::thread my_thread(func, arg1, std::ref(arg2), arg3)`.

If you don't wait for the thread to finish in the `main()` thread, you need to ensure that the data accessed by the thread is valid until the thread is finished with it. This isn't a new problem - even in single threaded code it's undefined behavior to access an object after it's been destroyed - but the use of threads provides another opportunity to encounter such lifetime issues. 

One situation in which you can encounter such problems is when the thread function holds pointers or references to local variables and the thread hasn't finished when the function exits. 

```cpp
#include <iostream>
#include <thread>

void do_some_work(int& i)
{
    std::cout << "\nThe value of i is = " << i; //Potential access to dangling reference
    std::cout << "\nIncrementing the value of i";
    ++i;
    std::cout << "\nThe new value of i = " << i;
}

int main()
{
    std::cout << "\nmain() thread";
    int i{1};
    std::thread my_thread(do_some_work, std::ref(i)); // Spawn a new thread
    my_thread.detach(); // Don't wait for the thread to finish
    std::cout << "\nExiting main() thread"; //New thread might still be running
    return 0;
}
```

stdout:
```
main() thread
Exiting main() thread
```

In this case, the new thread associated with `my_thread` is still running when `main()` exits, because you explicitly decided not to wait for it by calling `detach()`. If the thread is still running, the statements in `do_some_work(int& )`  will access an already destroyed variable `i`. This is like normal single-threaded code - allowing a pointer or reference to a local variable to persist beyond the function exit, which is never a good idea. But, it's easier to make this mistake with multi-threaded code, because it isn't immediately apparent that this has happened.

### Waiting for a thread to complete

If you need to wait for a thread to complete, you do this by calling `join()` on the associated `std::thread` instance. In the previous listing, replacing the call to `my_thread.detach()` by `my_thread.join()` would therefore be sufficient to ensure that the thead was finished before the function was exited and thus before the local variables were destroyed. In real code, the original thread would either have work to do or would have launched several threads to do useful work before waiting for them to complete. 

`join()` is a simple and brute-force technique - either you wait for a thread to finish or you don't. If you need more fine-grained control over waiting for a thread, such as to check whether a thread is finished, or wait only a certain period of time, then you have to use alternative mechanisms such as condition variables and futures. 

### Waiting in exceptional circumstances

You need to ensure that you've called either `join()` or `detach()` before a `std::thread` object is destroyed. If you're detaching a thread, you can usually call `detach()` immediately after the thread has been started, so this isn't a problem. But, if you're intending to wait for a thread, you need to 