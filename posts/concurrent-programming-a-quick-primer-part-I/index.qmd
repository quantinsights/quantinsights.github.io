---
title: "Concurrent programming - A Primer (Part I)"
author: "Quasar"
date: "2024-09-28"
categories: [C++]      
image: "cpp.jpg"
toc: true
toc-depth: 3
---

## An Introduction

When we talk about concurrency in terms of computers, I mean a single system performing multiple independent activities in parallel, rather than sequentially, or one after the other. Historically, most desktop computers have had one processor, with a single processing unit or core, and this remains true for many desktop machines today. Such a machine can only perform one task at a time, but it can switch between tasks many times per second. By doing a bit of one task, then a bit of another and so on, it appears that the tasks are happening concurrently. This is called *task switching*. We still talk about concurrency with such systems, because the task switches are so fast, you can't tell at which point a task may be suspended as the processor switches to another one. The task switching provides the illusion of concurrency to both the user and the applications themselves.

Computers containing multiple processors have been used for servers and high-performance computing tasks for years, and computers based on processors with more than one core on a single chip (multicore processors) are becoming increasingly common as desktop machines. Whether they have multiple processors or multiple cores within a processor (or both), these computers are capable of running more than one task in parallel. This is called *hardware concurrency*. 

Remember that, on a single core machine doing task-switching, the chunks from each task are interleaved. But, in order to do the interleaving, th system has to perform a *context switch* everytime it changes from one task to another, and this takes time. In order to perform a context switch, the OS has to save CPU state and the instruction pointer for the currently running task, work out which task to switch to, and reload the CPU state for the task being switch to. The CPU will then potentially have to load the memory for the instructions and data for the new task into the cache, which can prevent the CPU from executing any instructions, causing further delay.

## Basic Thread Management

The C++ Standard Library makes most thread-management tasks super-easy, with almost everything managed through the `std::thread` object associated with a given thread. Every C++ program has atleast one thread, which is started by the C++ runtime: the thread running `main()`. Your program can then launch additional threads that have another function as the entry point. These threads then run concurrently with each other and with the `main()` thread. 

### Launching a thread

Threads are started by constructing a `std::thread` object that specifies the task to run on that thread. The task can be any *callable object*. A *callable unit* is any entity that behaves like a function, so this could be a function, a function pointer, a lambda function or `std::function` (function) object. 

For example:

```cpp
#include <iostream>
#include <thread>

void do_some_work()
{
    std::cout << "\nPerforming some work in a separate thread...";
}

int main()
{
    std::cout << "\nmain() thread";
    std::thread t(do_some_work); // Spawn a new thread
    t.join();
    std::cout << "\nExiting main() thread";
    return 0;
}
```

stdout:
```
main() thread
Performing some work in a separate thread...
Exiting main() thread
```

Once you've started your thread, you need to explicitly decide whether to wait for it to finish(by joining with it) or leave it to run on its own (by detaching it). If you don't decide before the `std::thread` object goes out of scope and is destroyed, then your program is terminated (the `std::thread` destructor calls `std::terminate()`). So, ensure that the thread is correctly joined or detached. You only have to make this decision before the `std::thread` object is destroyed - the thread itself may well have finished before you join with it or detach it, and if you detach it, then if the thread is still running, it will continue to do so, and may continue running long after the `std::thread` object is destroyed; it will only stop running when it finally returns from the thread function. 

If you don't wait for the thread to finish, you need to ensure that the data accessed by the thread is valid until the thread is finished with it. This isn't a new problem - even in single threaded code it's undefined behavior