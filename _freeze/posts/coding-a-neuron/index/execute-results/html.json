{
  "hash": "0909ac02d1302b22ca28e998f00d4620",
  "result": {
    "markdown": "---\ntitle: \"Coding a neuron\"\nauthor: \"Quasar\"\ndate: \"2024-05-28\"\ncategories: [Machine Learning]      \nimage: \"image.jpg\"\ntoc: true\ntoc-depth: 3\n---\n\n## Introduction\n\nIn 1943, McCulloch and Pitts introduced artificial intelligence to the world. Their idea was to develop an algorithmic approach to mimic the functionality of the human brain. Due to the structure of the brain consisting of a net of neurons, they introduced the so-called *artificial neurons* as building blocks.\n\n In it's most simple form, the neuron consists of :\n\n- dendrites, which receive the information from other neurons\n- soma, which processes the information\n- synapse, transmits the output of this neuron\n- axon, point of connection to other neurons\n\nConsequently, a mathematical definition of an artificial neuron is as follows. \n\n*Definition.* An *artificial neuron* with weights $w_1,\\ldots,w_n \\in \\mathbf{R}$, bias $b\\in\\mathbf{R}$ and an activation function $\\rho:\\mathbf{R} \\to \\mathbf{R}$ is defined as the scalar-valued function $f:\\mathbf{R}^n \\to \\mathbf{R}$ given by:\n\n\\begin{align*}\nf(x_1,\\ldots,x_n) = \\rho \\left(\\sum_{i=1}^{n}w_i x_i + b\\right) = \\rho(\\mathbf{w}^T \\mathbf{x}+b) \\tag{1}\n\\end{align*}\n\nwhere $\\mathbf{w} = (w_1,\\ldots,w_n)$ and $\\mathbf{x}=(x_1,\\ldots,x_n)$.\n\nA single neuron by itself is useless, but when combined with hundreds or thousands(or many more) of other neurons, the interconnectivity can approximate any complex function and frequently outperforms any other machine learning methods.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n%load_ext itikz\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\\foreach \\i in {1,2}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=red!30\n        ] (Input-\\i) at (0,-\\i * 2) {\\large $x_\\i$};\n}\n\\foreach \\i in {1,2,...,5}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=30 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,5}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=30 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n}\n\\foreach \\i in {1,2}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=green!30] (Output-\\i) at (9.0,-\\i * 2) {\\large $\\hat{y}_\\i$};\n}\n\n% Connect neurons In-Hidden1\n\\foreach \\i in {1,...,2}\n{\n    \\foreach \\j in {1,...,5}\n    {\n        \\draw[->, shorten >=1pt] (Input-\\i) -- (Hidden1-\\j);   \n    }\n}\n\\foreach \\i in {1,...,5}\n{\n    \\foreach \\j in {1,...,5}\n    {\n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\j);   \n    }\n}\n\\foreach \\i in {1,...,5}\n{\n    \\foreach \\j in {1,2}\n    {\n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output-\\j);   \n    }\n}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n![](index_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\nDense layers, the most common layers, consist of interconnected neurons. In a dense layer, each neuron of a given layer is connected to every neuron of the next layer, which means its output value becomes an input for the next neurons. Each connection between neurons has a weight associated with it, which is a trainable factor of how much of this input to use. Once all of the $\\text{inputs} \\cdot \\text{ weights}$ flow into our neuron, they are summed and a bias, another trainable parameter is added.\n\nSay, we have an input $x_1$ and weight $w_1$, then the output $y_1 = w_1 x_1$ is a straight-line with slope $w_1$. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}\n\\addplot[color=blue]{x};\n\\addlegendentry{\\(f(x)=x\\)}\n\\addplot[color=red]{2*x};\n\\addlegendentry{\\(f(x)=2x\\)}\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](index_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nThe bias offsets the overall function. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}\n\\addplot[color=black]{x+1};\n\\addlegendentry{\\(f(x)=x+1\\)}\n\\addplot[color=gray]{x-1};\n\\addlegendentry{\\(f(x)=x-1\\)}\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](index_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\n### Activation functions\n\nLet us now look at some examples of activation functions. \n\nThe heaviside function is defined as:\n\n\\begin{align*}\n\\rho(x) &= \n\\begin{cases}\n1, & x > 0 \\\\\n0, & x \\leq 0\n\\end{cases}\n\\end{align*}\n\nThe sigmoid function is defined as:\n\n\\begin{align*}\n\\rho(x) &= \\frac{1}{1+e^{-x}}\n\\end{align*}\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}\n\\addplot[color=black]{1/(1+exp(-x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](index_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\nThe Rectifiable Linear Unit (ReLU) function is defined as:\n\n\\begin{align*}\n\\rho(x) &= \\max(0,x)\n\\end{align*}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}\n\\addplot[color=black]{max(0,x)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](index_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n## Coding a layer with 3-neurons\n\nLet's code a simple layer with $n=3$ neurons.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ninputs = [1, 2, 3, 2.5]\nweights = [[0.2, 0.8, -0.5, 1.0], [0.5, -0.91, 0.26, -0.5], [-0.26, -0.27, 0.17, 0.87]]\n\nbiases = [2, 3, 0.5]\n\n# Output of the current layer\nlayer_outputs = []\n\n# For each neuron\nfor neuron_weights, neuron_bias in zip(weights, biases):\n    # zeroed output of the neuron\n    neuron_output = 0.0\n    # for each input and weight to the neuron\n    for input, weight in zip(inputs, neuron_weights):\n        # multiply this input with the associated weight\n        # and add to the neuron's output variable\n        neuron_output += input * weight\n    # Add bias\n    neuron_output += neuron_bias\n    # Put the neuron's result to the layer's output list\n    layer_outputs.append(neuron_output)\n\nprint(layer_outputs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4.8, 1.21, 2.385]\n```\n:::\n:::\n\n\nWe can achieve the same results as in our pure Python implementation of multiplying each component in our input vector $\\mathbf{x}$ and weights vector $\\mathbf{w}$ element-wise, by taking an inner product $\\mathbf{w} \\cdot \\mathbf{x}$. \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\n\ninputs = [1, 2, 3, 2.5]\nweights = [\n    [0.2, 0.8, -0.5, 1.0], \n    [0.5, -0.91, 0.26, -0.5], \n    [-0.26, -0.27, 0.17, 0.87]\n]\n\nbiases = [2, 3, 0.5]\n\n# Output of the current layer\nlayer_outputs = np.dot(weights, inputs) + biases\n\nprint(layer_outputs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4.8   1.21  2.385]\n```\n:::\n:::\n\n\nTo train, neural networks tend to receive data in *batches*. So far, the example input data has only one sample (or observation) of various features called a feature set instance:\n\n```python\nsample = [1, 2, 3, 2.5]\n```\n\nOften, neural networks expect to take in many *samples* at a time. One reason is its faster to train in batches in parallel processing. Also, if you fit on one sample at a time, you're highly likely to keep fitting to that individual sample, rather than slowly producing general tweaks to the weights and biases that fit the entire dataset. Fitting or training in batches gives you a higher chance of making more meaningful changes to weights and biases.\n\n## A layer of neurons and a batch of data\n\nCurrently, the weights matrix looks as follows:\n\n\\begin{align*}\nW = \\begin{bmatrix}\n0.2 & 0.8 & -0.5 & 1.0 \\\\\n0.5 & -0.91 & 0.26 & -0.5 \\\\\n-0.26 & -0.27 & 0.17 & 0.87\n\\end{bmatrix}\n\\end{align*}\n\nAnd say, that we have a batch of inputs:\n\n\\begin{align*}\nX = \\begin{bmatrix}\n1.0 & 2.0 & 3.0 & 3.5 \\\\\n2.0 & 5.0 & -1.0 & 2.0\\\\\n-1.5 & 2.7 & 3.3 & -0.8\n\\end{bmatrix}\n\\end{align*}\n\nWe need to take the inner products $(1.0, 2.0, 3.0, 3.5) \\cdot (0.2, 0.8, -0.5, 1.0)$, $(2.0, 5.0, -1.0, 2.0) \\cdot (0.2, 0.8, -0.5, 1.0)$ and $(-1.5, 2.7, 3.3, -0.8) \\cdot (0.2, 0.8, -0.5, 1.0)$ for the first neuron.\n\nWe need to take the inner products $(1.0, 2.0, 3.0, 3.5) \\cdot (0.5, -0.91, 0.26, -0.5)$, $(2.0, 5.0, -1.0, 2.0) \\cdot (0.5, -0.91, 0.26, -0.5)$ and $(-1.5, 2.7, 3.3, -0.8) \\cdot (0.5, -0.91, 0.26, -0.5)$ for the second neuron.\n\nAnd so forth. \n\nConsider the matrix product $XW^T$:\n\n\\begin{align*}\nXW^T &= \\begin{bmatrix}\n1.0 & 2.0 & 3.0 & 2.5 \\\\\n2.0 & 5.0 & -1.0 & 2.0\\\\\n-1.5 & 2.7 & 3.3 & -0.8\n\\end{bmatrix} \n\\begin{bmatrix}\n0.2 & 0.5 & -0.26 \\\\\n0.8 & -0.91 & -0.27 \\\\\n-0.5 & 0.26 & 0.17 \\\\\n1.0 & -0.5 & 0.87\n\\end{bmatrix}\\\\\n&= \\begin{bmatrix}\n2.8 & -1.79 & 1.885 \\\\\n6.9 & -4.81 & -0.3 \\\\\n-0.59 & -1.949 & -0.474\n\\end{bmatrix}\n\\end{align*}\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport numpy as np\n\nX = [\n    [1.0, 2.0, 3.0, 2.5],\n    [2.0, 5.0, -1.0, 2.0],\n    [-1.5, 2.7, 3.3, -0.8]\n]\n\nW = [\n    [0.2, 0.8, -0.5, 1.0],\n    [0.5, -0.91, 0.26, -0.5],\n    [-0.26, -0.27, 0.17, 0.87]\n]\n\nnp.dot(X,np.array(W).T)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([[ 2.8  , -1.79 ,  1.885],\n       [ 6.9  , -4.81 , -0.3  ],\n       [-0.59 , -1.949, -0.474]])\n```\n:::\n:::\n\n\nSo, we can process a batch of inputs as:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nlayer_outputs = np.dot(X,np.array(W).T) + biases\nprint(layer_outputs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 4.8    1.21   2.385]\n [ 8.9   -1.81   0.2  ]\n [ 1.41   1.051  0.026]]\n```\n:::\n:::\n\n\nThe second argument for `np.dot()` is going to be our transposed weights. Before, we were computing the neuron output using a single sample of data, but now we've taken a step forward where we model the layer behavior on a batch of data.\n\n## Adding Layers\n\nThe neural network we have built is becoming more respectable, but at the moment, we have only one layer. Neural networks become deep when they have $2$ or more *hidden layers*. At the moment, we have just one layer, which is effectively an output layer. Why we want two or more hidden layers will become apparent later on. Currently, we have no hidden layers. A hidden layer isn't an input or output layer; as the scientist, you see the data as they are handed to the input layer and the resulting data from the output layer. Layers between these endpoints have values that we don't necessarily deal with, and hence the name \"hidden\". Don't let this name convince you that you can't access these values, though. You will often use them to diagnose issues or improve your neural network. To explore this concept, let's add another layer to this neural network, and for now, let's assume that these two layers that we're going to have will be hidden layers, and we just coded our output layer yet. \n\nBefore we add another layer, let's think about what's coming. In the case of the first layer, we can see that we have an input with $4$ features. \n\n::: {.cell execution_count=11}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\\foreach \\i in {1,2,...,4}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=red!30\n        ] (Input-\\i) at (0,-\\i * 2) {\\large $x_\\i$};\n}\n\\foreach \\i in {1,2,...,3}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=-10 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\n% Connect neurons In-Hidden1\n\\foreach \\i in {1,...,4}\n{\n    \\foreach \\j in {1,...,3}\n    {\n        \\draw[->, shorten >=1pt] (Input-\\i) -- (Hidden1-\\j);   \n    }\n}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](index_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\nSamples(feature set data) get fed through the input, which does not change it in any way, to our first hidden layer, which we can see has $3$ sets of weights with $4$ values each. \n\nEach of those $3$ unique weight sets is associated with its distinct neuron. Thus, since we have $3$ weight sets, we have $3$ neurons in the first hidden layer. Each neuron has a unique set of weights, of which we have $4$ (as there are $4$ inputs to this layer), which is why our initial weights have a shape of $(3,4)$.\n\nNow we wish to add another layer. To do that, we must make sure that the expected input to that layer matches the previous layer's output. We have set the number of neurons in a layer by setting how many weights and biases we have. The previous layer's influence on weight sets for the current layer is that each weight set needs to have a separate weight per input. This means a distinct weight per neuron from the previous layer (or feature if we're talking the input). The previous layer has $3$ weight sets and $3$ biases, so we know it has $3$ neurons. This then means, for the next layer, we can have as many weight sets as we want (because this is how many neurons this new layer will have), but each of those weight sets must have $3$ discrete weights. \n\nTo create this new layer, we are going to copy and paste our `weights` and `biases` to `weights2` and `biases2`, and change their values to new made up sets. Here's an example:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ninputs = [\n    [1, 2, 3, 2.5],\n    [2.0, 5.0, -1.0, 2],\n    [-1.5, 2.7, 3.3, -0.8]\n]\n\nweights = [\n    [0.2, 0.8, -0.5, 1],\n    [0.5, -0.91, 0.26, -0.5],\n    [-0.26, -0.27, 0.17, 0.87]\n]\n\nbiases = [2, 3, 0.5]\n\nweights2 = [\n    [0.1, -0.14, 0.5],\n    [-0.5, 0.12, -0.33],\n    [-0.44, 0.73, -0.13]\n]\n\nbiases2 = [-1, 2, -0.5]\n```\n:::\n\n\nNext, we will now call the outputs `layer1_outputs`. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nlayer1_outputs = np.dot(inputs, np.array(weights).T) + biases\n```\n:::\n\n\nAs previously stated, inputs to the layers are either inputs from the actual dataset you're training with, or outputs from a previous layer. That's why we defined $2$ versions of `weights` and `biases`, but only one of `inputs`. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nlayer2_outputs = np.dot(layer1_outputs, np.array(weights2).T) + biases2\n```\n:::\n\n\nAt this point, our neural network could be visually represented as:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\\foreach \\i in {1,2,...,4}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=red!30\n        ] (Input-\\i) at (0,-\\i * 2) {\\large $x_\\i$};\n}\n\\foreach \\i in {1,2,...,3}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=-10 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,3}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=-10 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n% Connect neurons In-Hidden1\n\\foreach \\i in {1,...,4}\n{\n    \\foreach \\j in {1,...,3}\n    {\n        \\draw[->, shorten >=1pt] (Input-\\i) -- (Hidden1-\\j);   \n    }\n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {1,...,3}\n{\n    \\foreach \\j in {1,...,3}\n    {\n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\j);   \n    }\n}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](index_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\n## Training Data\n\nNext, rather than hand-typing in random data, we'll use a function that can create non-linear data. What do we mean by non-linear? Linear data can be fit or represented by a straight line. Non-linear data cannot be represented well by a straight line. \n\nWe shall use the python package `nnfs` to create data. You can install it with\n\n```\npip install nnfs\n```\n\nYou typically don't generate training data from a package like `nnfs` for your neural networks. Generating a dataset this way is purely for convenience at this stage. I shall also use this package to ensure repeatability.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nimport numpy as np\nimport nnfs\n\nnnfs.init()\n```\n:::\n\n\nThe `nnfs.init()` does three things: it sets the random seed to $0$ by default, creates a `float32` dtype default and overrides the original dot product from `numpy`. All of these are meant to ensure repeatable results for following along. \n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfrom nnfs.datasets import spiral_data\nimport matplotlib.pyplot as plt\n\nX, y = spiral_data(samples=100, classes=3)\n\nplt.scatter(X[:,0], X[:,1])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=590 height=411}\n:::\n:::\n\n\nThe `spiral_data` function allows us to create a dataset with as many classes as we want. The function has parameters to choose the number of classes and the number of points/observations per class in the resulting non-linear dataset. \n\nIf you trace from the center, you can determine all $3$ classes separately, but this is a very challenging problem for a machine learning classifier to solve. Adding color to the chart makes this more clear:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nplt.scatter(X[:,0],X[:,1],c=y,cmap='brg')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){width=590 height=411}\n:::\n:::\n\n\nKeep in mind that the neural network will not be aware of the color differences as the data have no class encodings. This is only made as an instruction for you. In the data above, each dot is an observation, that is, it's coordinates are the samples that form the dataset. The classification for the dot has to do with which spiral it is a part of, depicted by red, blue or green color. \n\n## Dense Layer Class\n\nNow that we no longer need to hand-type our data, we should create something similar for our various types of neural network layers. So far, we've only used what's called a **dense** or **fully-connected** layer. These layers are commonly referred to as dense layers in papers, literature and code, but you will see them called fully-connected or fc for short in the code I write. Our dense layer class begins with two methods:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nclass DenseLayer:\n    def __init__(self, n_inputs, n_neurons):\n        # Initialize weights and biases\n        pass # using pass statement as a placeholder\n\n    # Forward pass\n    def forward(self, inputs):\n        # Calculate output values from inputs, weights and biases\n        pass # using pass statement as a placeholder\n```\n:::\n\n\nWeights are often initialized randomly for a model, but not always. If you wish to load a pre-trained model, you will initialize the parameters to whatever that pretrained model finished with. It's also possible that, even for a new model, you have some other initialization rules besides random. From now, we'll stick with random initialization. Next, we have the `forward` method. When we pass data through a model from beginning to end, this is called a **forward** pass. Just like everything else, this is not the only way to do things. You can have the data loop back around and do other interesting things. We'll keep it usual and perform a regular forward pass.\n\nTo continue the `LayerDense` class code, let's add the random initialization of weights and biases:\n\n```python\n#Layer initialization\ndef __init__(self,n_inputs, n_neurons):\n    self.weights = 0.01 * np.random.randn(n_inputs,n_neurons)\n    self.biases = np.zeros((1,n_neurons))\n```\n\nHere, we are setting the weights to be random and the biases to be $0$. Note that, we are initializing weights to be a matrix of dimensions $n_{inputs} \\times n_{neurons}$, rather than $n_{neurons} \\times n_{inputs}$. We're doing this ahead instead of transposing everytime we perform a forward pass, as explained in the previous chapter. \n\nWe initialize the biases to zero, because with many samples containing values of $0$, it will ensure that a neuron fires initially. The most common initialization for biases is zero. This will vary depending on our use-case and is just one of the many things we can tweak when trying to improve results. One situation where we might want to try something else is with what's called *dead neurons*. \n\nImagine our step function again:\n\n\\begin{align*}\ny = \\begin{cases}\n1, & x > 0\\\\\n0, & x \\leq 0\n\\end{cases}\n\\end{align*}\n\nIt's possible for $\\text{weights} \\cdot \\text{inputs} + \\text{biases}$ not to meet the threshold of the step function, which means the neuron will output a zero. On its own, this is not a big issue, but it becomes a problem if this happens to this neuron for every one of the input samples (it'll become clear why once we learn about backpropogation). So, then this neuron's $0$ output is the input to another neuron. Any weight multiplied by zero will be zero. With an increasing number of neurons outputting $0$, more inputs to the next neurons will be zeros, rendering the network essentially non-trainable or *dead*. \n\nOn to our `forward` method now. \n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nclass DenseLayer:\n    def __init__(self, n_inputs, n_neurons):\n        self.weights = 0.01 * np.random.randn(n_inputs,n_neurons)\n        self.biases = np.zeros((1,n_neurons))\n\n    def forward(self,inputs):\n        self.output = np.dot(inputs,self.weights) + self.biases\n```\n:::\n\n\nWe are now ready to make use of this new class instead of hardcoded calculations, so let's generate some data using the discussed dataset creation method and use our new layer to perform a forward pass:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Create dataset\nX, y = spiral_data(samples=100, classes=3)\n\n# Create a dense layer with 2 input features and 3 output values\ndense1 = DenseLayer(2, 3)\n\n# Perform a forward pass of our training data through this layer\ndense1.forward(X)\n\n# Let's see the output of the first few samples\nprint(dense1.output[:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]\n [-1.11171044e-04 -5.11007493e-05 -1.12099799e-04]\n [ 2.99257295e-06 -2.69126613e-04 -1.45165104e-04]\n [ 8.95101766e-05 -4.30442247e-04 -1.68079801e-04]\n [-3.49893759e-04 -3.07208364e-04 -4.33002861e-04]]\n```\n:::\n:::\n\n\n## Activation Functions\n\nWe use activation functions because if the activation function itself is non-linear, it allows for neural networks with two or more layers to map non-linear functions. We'll see how this works. In general, your neural network will have $2$ types of activation functions. The first will be the activation function used in hidden layers, and the second will be used in the output layer. Usually, the activation function used for hidden neurons will be all the same for all of them, but it doesn't have to.\n\n### Why use activation functions?\n\nLet's discuss why we use activation functions in the first place? In most cases, for a neural network to fit a non-linear function, we need it to contain two or more hidden layers and we need those hidden layers to use a non-linear activation function.\n\nWhile there are certainly problems in life that are linear in nature, for example, trying to figure out the cost of some number of shirts, and we know the cost of an individual shirt, then the equation to calculate the price of any number of those products is a linear equation; other problems in life are not so simple. \n\nMany interesting and hard problems are non-linear. The main attraction of neural networks has to do with their ability to solve non-linear problems. If we allow only linear activation functions in a neural network, the output will just be a linear transformation of the input, which is not enough to form a universal function approximator. \n\nFor simplicity, suppose a neural network has $2$ hidden layers with $1$ neuron each. \n\n::: {.cell execution_count=22}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        fill=red!30\n        ] (Input) at (0,0) {\\large $x_1$};\n\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50\n        ] (Hidden1) at (3.0,0) {\\large $h_1^{(1)}$};\n        \n\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50\n        ] (Hidden2) at (6.0,0) {\\large $h_1^{(2)}$};\n\n    \\node[circle, \n        minimum size = 15mm,\n        fill=red!30\n        ] (Output) at (9.0,0) {\\large $\\hat{y}_1$};        \n        \n\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $w_1$};\n    \\draw[->, shorten >=1pt] (Hidden1) -- (Hidden2) node [midway,above]  {\\large $w_2$};\n    \\draw[->, shorten >=1pt] (Hidden2) -- (Output);\n    \\draw[->, shorten >=1pt] (3.0, -2.0) node [below] {\\large $b_1$} -- (Hidden1);\n    \\draw[->, shorten >=1pt] (6.0, -2.0) node [below] {\\large $b_2$} -- (Hidden2);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](index_files/figure-html/cell-23-output-1.svg){}\n:::\n:::\n\n\n\\begin{align*}\n\\hat{y}_1 &= h_1^{(2)} \\\\\n&= w_2 h_1^{(1)} + b_2 \\\\\n&= w_2 (w_1 x_1 + b_1) + b_2 \\\\\n&= w_2 w_1 x_1 + (w_2 b_1 + b_2)\n\\end{align*}\n\nSo, $\\hat{y}_1$ is a linear function of the inputs, no matter, what values we choose for weights and biases.\n\nThe composition of linear functions is linear. No matter what we do, however many layers we have, or neurons we have in each layer, this network can only model linear functions.\n\n## ReLU Activation in a pair of Neurons\n\nIt is less obvious how, with a barely non-linear activation function, like the rectified linear activation function, we can suddenly model non-linear relationships and functions. Let's start with a single neuron. We'll begin with both a weight of zero and a bias of zero:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n    \n    \\node[] (w) at (-3,0) {};\n    \\node[] (b) at (0,-2) {};\n\n    \\draw[->, shorten >=1pt] (w) -- (Input) node [midway,above] {\\large $0.00$};\n    \\draw[->, shorten >=1pt] (b) node [below] {\\large $0.00$} -- (Input);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](index_files/figure-html/cell-24-output-1.svg){}\n:::\n:::\n\n\nIn this case, no matter what input we pass, the output of this neuron will always be $0$, because the weight is $0$ and the bias is $0$. \n\n::: {.cell execution_count=24}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid]\n\\addplot[color=blue,thick]{0};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](index_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\nLet's set the weight to be $1.00$. \n\n::: {.cell execution_count=25}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n    \n    \\node[] (w) at (-3,0) {};\n    \\node[] (b) at (0,-2) {};\n\n    \\draw[->, shorten >=1pt] (w) -- (Input) node [midway,above] {\\large $1.00$};\n    \\draw[->, shorten >=1pt] (b) node [below] {\\large $0.00$} -- (Input);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n![](index_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\nNow, it just looks like the basic rectified linear function. No surprises yet! \n\n::: {.cell execution_count=26}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2.0,ymax=2.0,xmin=-2.0,xmax=2.0]\n\\addplot[color=blue,thick]{max(x,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n![](index_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\nNow, let's set the bias to $0.50$:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n    \n    \\node[] (w) at (-3,0) {};\n    \\node[] (b) at (0,-2) {};\n\n    \\draw[->, shorten >=1pt] (w) -- (Input) node [midway,above] {\\large $1.00$};\n    \\draw[->, shorten >=1pt] (b) node [below] {\\large $0.50$} -- (Input);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](index_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\nWe can see that in this case, with a single neuron, the bias offsets the overall function's activation point horizontally.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2.0,ymax=2.0,xmin=-2.0,xmax=2.0]\n\\addplot[color=blue,thick,samples=100]{max(x+0.50,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](index_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\nBy increasing bias, we're making this neuron activate earlier. What happens when we negate the weight to $-1.0$?\n\n::: {.cell execution_count=29}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n    \n    \\node[] (w) at (-3,0) {};\n    \\node[] (b) at (0,-2) {};\n\n    \\draw[->, shorten >=1pt] (w) -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b) node [below] {\\large $0.50$} -- (Input);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](index_files/figure-html/cell-30-output-1.svg){}\n:::\n:::\n\n\nWith a negative weight and this single neuron, the function has become a question of when this neuron *deactivates*. \n\n::: {.cell execution_count=30}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2.0,ymax=2.0,xmin=-2.0,xmax=2.0]\n\\addplot[color=blue,thick,samples=100]{max(-x+0.50,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](index_files/figure-html/cell-31-output-1.svg){}\n:::\n:::\n\n\nWhat happens if modify the weight to $-2.00$? \n\n::: {.cell execution_count=31}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n    \n    \\node[] (w) at (-3,0) {};\n    \\node[] (b) at (0,-2) {};\n\n    \\draw[->, shorten >=1pt] (w) -- (Input) node [midway,above] {\\large $-2.00$};\n    \\draw[->, shorten >=1pt] (b) node [below] {\\large $0.50$} -- (Input);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n![](index_files/figure-html/cell-32-output-1.svg){}\n:::\n:::\n\n\nThe neuron now deactivates at $0.25$. \n\n::: {.cell execution_count=32}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2.0,ymax=2.0,xmin=-2.0,xmax=2.0]\n\\addplot[color=blue,thick,samples=100]{max(-2*x+0.50,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n![](index_files/figure-html/cell-33-output-1.svg){}\n:::\n:::\n\n\nUpto this point, we've seen how we can use the bias to offset the function horizontally, and the weight to influence the slope of the activation. Moreover, we're also able to control whether the function is one for determining where the neuron activates or deactivates. What happens when we have, rather than just one neuron, a pair of neurons? For example, let's pretend that we have two hidden layers of $1$ neuron each. Thinking back to the $y=x$ activation function, we unsurprisingly discovered that a linear activation function produced linear results no matter what chain of neurons we made. Let's see what happens with the rectified linear function for the activation. \n\nWe'll begin with the last values for the first neuron and a weight of $1.00$ and a bias of $0.00$ for the second neuron.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Hidden1) at (3,0) {};\n    \n    \\node[] (w1) at (-3,0) {};\n    \\node[] (b1) at (0,-2) {};\n    \\node[] (b2) at (3,-2) {};\n\n    \\draw[->, shorten >=1pt] (w1) -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b1) node [below] {\\large $0.50$} -- (Input);\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $1.00$};\n    \\draw[->, shorten >=1pt] (b2) node [below] {\\large $0.00$} -- (Hidden1);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n![](index_files/figure-html/cell-34-output-1.svg){}\n:::\n:::\n\n\nAs we can see so far, there's no change. This is because the second neuron's bias is doing no offsetting, and the second neuron's weight is just multiplying the output by $1$, so there's no change. Let's try to adjust the second neuron's bias now:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-1,ymax=6,ytick={-1,0,...,6}]\n\\addplot[color=blue,thick,samples=100]{max(max(-x+0.50,0),0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n![](index_files/figure-html/cell-35-output-1.svg){}\n:::\n:::\n\n\nLet's try to adjust the second neuron's bias now:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Hidden1) at (3,0) {};\n    \n    \\node[] (w1) at (-3,0) {};\n    \\node[] (b1) at (0,-2) {};\n    \\node[] (b2) at (3,-2) {};\n\n    \\draw[->, shorten >=1pt] (w1) -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b1) node [below] {\\large $0.50$} -- (Input);\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $1.00$};\n    \\draw[->, shorten >=1pt] (b2) node [below] {\\large $1.00$} -- (Hidden1);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n![](index_files/figure-html/cell-36-output-1.svg){}\n:::\n:::\n\n\nNow, we see some fairly interesting behavior. The bias of the second neuron indeed shifted the overall function but, rather than shifting it horizontally, it shifted vertically.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-1,ymax=6,ytick={-1,0,...,6}]\n\\addplot[color=blue,thick,samples=100]{max(max(-x+0.50,0)+1.00,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n![](index_files/figure-html/cell-37-output-1.svg){}\n:::\n:::\n\n\nWhat then might happen, if we make the $2$nd neuron's weight $-2$ rather than $1$?\n\n::: {.cell execution_count=37}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Hidden1) at (3,0) {};\n    \n    \\node[] (w1) at (-3,0) {};\n    \\node[] (b1) at (0,-2) {};\n    \\node[] (b2) at (3,-2) {};\n\n    \\draw[->, shorten >=1pt] (w1) -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b1) node [below] {\\large $0.50$} -- (Input);\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $-2.00$};\n    \\draw[->, shorten >=1pt] (b2) node [below] {\\large $1.00$} -- (Hidden1);\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n![](index_files/figure-html/cell-38-output-1.svg){}\n:::\n:::\n\n\nSomething exciting has occurred! What we have here is a neuron that has both an activation and a deactivation point. Now, the output after these two neurons will be variable, so long as it is inside of some specific range. So, basically if both neurons are activated then we actually sort of see this influence on the value. Otherwise, if both neurons aren't activated, then the output is just a static value. \n\n::: {.cell execution_count=38}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-1,ymax=2,ytick={-1,0,...,2},xmin=-2,xmax=2]\n\\addplot[color=blue,thick,samples=500]{max(-2.0*max(-x+0.50,0)+1.00,0)};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n![](index_files/figure-html/cell-39-output-1.svg){}\n:::\n:::\n\n\nSo, when we are below the activation of the first neuron, the output will be the bias of the second neuron $1.00$. \n\n::: {.cell execution_count=39}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Input) at (0,0) {};\n\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue,\n        fill=green\n        ] (Hidden1) at (3,0) {};\n    \n    \\node[] (w1) at (-3,0) {};\n    \\node[] (b1) at (0,-2) {};\n    \\node[] (b2) at (3,-2) {};\n\n    \\draw[->, shorten >=1pt] (w1) node [left] {\\large $0.50$} -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b1) node [below] {\\large $0.50$} -- (Input);\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $-2.00$};\n    \\draw[->, shorten >=1pt] (b2) node [below] {\\large $1.00$} -- (Hidden1);\n    \\draw[->, shorten >=1pt] (Hidden1) -- (6,0) node [right] {$1.00$};\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n![](index_files/figure-html/cell-40-output-1.svg){}\n:::\n:::\n\n\nThe second neuron is activated if it's input is smaller than $0.50$. \n\nConsider what happens when the input to the first neuron is $0.00, -0.10, \\ldots$. The output of the first neuron is $0.50, 0.60, \\ldots$ which implies that the second neuron is deactivated, so the output of the second neuron is simply zero. \n\n::: {.cell execution_count=40}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue,\n        fill=green\n        ] (Input) at (0,0) {};\n\n    \\node[circle, \n        minimum size = 15mm,\n        draw=blue\n        ] (Hidden1) at (3,0) {};\n    \n    \\node[] (w1) at (-3,0) {};\n    \\node[] (b1) at (0,-2) {};\n    \\node[] (b2) at (3,-2) {};\n\n    \\draw[->, shorten >=1pt] (w1) node [left] {\\large $0.50$} -- (Input) node [midway,above] {\\large $-1.00$};\n    \\draw[->, shorten >=1pt] (b1) node [below] {\\large $0.50$} -- (Input);\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1) node [midway,above] {\\large $-2.00$};\n    \\draw[->, shorten >=1pt] (b2) node [below] {\\large $1.00$} -- (Hidden1);\n    \\draw[->, shorten >=1pt] (Hidden1) -- (6,0) node [right] {$0.00$};\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n![](index_files/figure-html/cell-41-output-1.svg){}\n:::\n:::\n\n\n## ReLU Activation in hidden layers\n\nLet's now take this concept and use it to fit to a sine wave-like function using two hidden layers of $8$ neurons each and we can hand-tune the values to fit the curve. We'll do this by working with $1$ pair of neurons at a time, which means $1$ neuron from each layer individually. For simplicity, we are also going to assume that the layers are not densely connected, and each neuron from the first hidden layer connects to only one neuron from the second hidden layer. That's usually not the case with the real models, but we want this simplification for the purpose of this demo. Additionally, this example model takes a single value as an input, the input to the sine function, and outputs a single value like the sine function. The output layer uses the linear activation function and the hidden layers will use the rectified linear activation function.\n\nTo start, we'll set all weights to $0$ and work with the first pair of neurons:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway] {$0.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$0.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.00$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n![](index_files/figure-html/cell-42-output-1.svg){}\n:::\n:::\n\n\nNext, we can set the weight for the hidden layer neurons and the output neuron to $1.00$, and we can see how this impacts the output:\n\n::: {.cell execution_count=42}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$1.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.00$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n![](index_files/figure-html/cell-43-output-1.svg){}\n:::\n:::\n\n\nThe output is:\n\n::: {.cell execution_count=43}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{max(max(x,0),0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n![](index_files/figure-html/cell-44-output-1.svg){}\n:::\n:::\n\n\nWe can increase the slope of the output by adjusting the weight of the first neuron of the first layer to $6.00$. \n\n::: {.cell execution_count=44}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.00$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n![](index_files/figure-html/cell-45-output-1.svg){}\n:::\n:::\n\n\nWe can now see, for example, that the initial slope of this function is what we'd like, but we have a problem. \n\n::: {.cell execution_count=45}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{max(max(6*x,0),0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n![](index_files/figure-html/cell-46-output-1.svg){}\n:::\n:::\n\n\nCurrently, this function never ends because this neuron pair never *deactivates*. We can visually see where we'd like the deactivation to occur. It's where the red fitment line diverges from our green sine wave. So now, while we have the correct slope, we need to set this spot as our deactivation point. To do that, we start by increasing the bias for the second neuron of the hidden layer to $0.70$. \n\n::: {.cell execution_count=46}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n![](index_files/figure-html/cell-47-output-1.svg){}\n:::\n:::\n\n\nRecall, that this offsets the overall function vertically:\n\n::: {.cell execution_count=47}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{max(max(6*x,0)+0.70,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n![](index_files/figure-html/cell-48-output-1.svg){}\n:::\n:::\n\n\nNow, we can set the weight for the second neuron to $-1$, causing a deactivation point to occur, atleast horizontally, where we want it. \n\n::: {.cell execution_count=48}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n![](index_files/figure-html/cell-49-output-1.svg){}\n:::\n:::\n\n\nWe get:\n\n::: {.cell execution_count=49}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{max(-max(6*x,0)+0.70,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n![](index_files/figure-html/cell-50-output-1.svg){}\n:::\n:::\n\n\nNow, we'd like to flip this slope back. How might we flip the output of these two neurons? \n\n::: {.cell execution_count=50}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,8}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,8}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n![](index_files/figure-html/cell-51-output-1.svg){}\n:::\n:::\n\n\nIt seems like we can take the weights of the connection to the output neuron, which is currently $1.0$ and just flip it to a $-1$, and that flips the function:\n\n::: {.cell execution_count=51}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n![](index_files/figure-html/cell-52-output-1.svg){}\n:::\n:::\n\n\nWe're certainly getting closer to making this first section fit how we want. Now, all we need to do is offset this up a bit. For this hand-optimized example, we're going to use the first $7$ pairs of neurons in the hidden layers to create the sine wave's shape. \n\n::: {.cell execution_count=52}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {2,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {2,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {2,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.70$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n![](index_files/figure-html/cell-53-output-1.svg){}\n:::\n:::\n\n\nIf we set the bias of the second neuron in the bottom pair to $1.0$ and the weight to the output neuron to $0.70$, we can vertically shift the line like so:\n\n::: {.cell execution_count=53}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.70};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n![](index_files/figure-html/cell-54-output-1.svg){}\n:::\n:::\n\n\nAt this point, we have completed the first section with an \"area of effect\" being the first upward section of the sine wave. We can start on the next section that we wish to do. We can start on the next section that we wish to do. We can start by setting all weights for this second pair of neurons to $1$ including the output neuron.\n\n::: {.cell execution_count=54}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {3,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.70$} (Output); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$1.00$} (Hidden1-2); \n\\draw[->, shorten >=1pt] (3,4) node [below] {$0.00$} --  (Hidden1-2); \n\\draw[->, shorten >=1pt] (Hidden1-2) -- node [midway,above] {$1.00$} (Hidden2-2); \n\\draw[->, shorten >=1pt] (6,4) node [below] {$0.00$} --  (Hidden2-2); \n\\draw[->, shorten >=1pt] (Hidden2-2) -- node [midway] {$1.00$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n![](index_files/figure-html/cell-55-output-1.svg){}\n:::\n:::\n\n\nAt this point, this second pair of neurons activation is beginning too soon, which is impacting the area of effect of the top pair we already aligned. \n\n::: {.cell execution_count=55}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.70+max(max(x,0),0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n![](index_files/figure-html/cell-56-output-1.svg){}\n:::\n:::\n\n\nTo fix this, we want this second pair to start influencing the output where the first pair deactivates, so we want to adjust the function horizontally. As you can recall from earlier, we adjust the first neuron's bias in this neuron pair to achieve this. Also, to modify the slope, we'll set the weight coming into that first neuron for the second pair, setting it to $3.50$. \n\n::: {.cell execution_count=56}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {3,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.70$} (Output); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$3.50$} (Hidden1-2); \n\\draw[->, shorten >=1pt] (3,4) node [below] {$-0.42$} --  (Hidden1-2); \n\\draw[->, shorten >=1pt] (Hidden1-2) -- node [midway,above] {$1.00$} (Hidden2-2); \n\\draw[->, shorten >=1pt] (6,4) node [below] {$0.00$} --  (Hidden2-2); \n\\draw[->, shorten >=1pt] (Hidden2-2) -- node [midway] {$1.00$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n![](index_files/figure-html/cell-57-output-1.svg){}\n:::\n:::\n\n\nAfter these adjustments:\n\n::: {.cell execution_count=57}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.70+max(max(3.50*x - 0.42,0),0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n![](index_files/figure-html/cell-58-output-1.svg){}\n:::\n:::\n\n\nWe will now use the same methodology as we did with the first pair of neurons to set the deactivation point. We set the weight for the second neuron in the hidden layer pair to $-1.00$ and the bias to $0.27$.\n\n::: {.cell execution_count=58}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {3,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.70$} (Output); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$3.50$} (Hidden1-2); \n\\draw[->, shorten >=1pt] (3,4) node [below] {$-0.42$} --  (Hidden1-2); \n\\draw[->, shorten >=1pt] (Hidden1-2) -- node [midway,above] {$-1.00$} (Hidden2-2); \n\\draw[->, shorten >=1pt] (6,4) node [below] {$0.27$} --  (Hidden2-2); \n\\draw[->, shorten >=1pt] (Hidden2-2) -- node [midway] {$1.00$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n![](index_files/figure-html/cell-59-output-1.svg){}\n:::\n:::\n\n\nThis results in:\n\n::: {.cell execution_count=59}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.70+max(-max(3.50*x - 0.42,0)+0.27,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n![](index_files/figure-html/cell-60-output-1.svg){}\n:::\n:::\n\n\nThen, we can flip this section's function again the same way we did with the first one, by setting the weight to the output neuron from $1.0$ to $-1.0$. \n\n::: {.cell execution_count=60}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {3,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.70$} (Output); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$3.50$} (Hidden1-2); \n\\draw[->, shorten >=1pt] (3,4) node [below] {$-0.42$} --  (Hidden1-2); \n\\draw[->, shorten >=1pt] (Hidden1-2) -- node [midway,above] {$-1.00$} (Hidden2-2); \n\\draw[->, shorten >=1pt] (6,4) node [below] {$0.27$} --  (Hidden2-2); \n\\draw[->, shorten >=1pt] (Hidden2-2) -- node [midway] {$-1.00$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n![](index_files/figure-html/cell-61-output-1.svg){}\n:::\n:::\n\n\nConsequently, we have:\n\n::: {.cell execution_count=61}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.70-max(-max(3.50*x - 0.42,0)+0.27,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n![](index_files/figure-html/cell-62-output-1.svg){}\n:::\n:::\n\n\nAnd again, just like the first pair, we use the bottom pair to fix the vertical offset.\n\n::: {.cell execution_count=62}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Input) at (0,0) {\\large $x_1$};\n\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden1-\\i) at (3.0,-\\i * 2) {\\large $h_\\i^{(1)}$};\n        \n}\n\\foreach \\i in {1,2,...,8}\n{\n    \\node[circle, \n        minimum size = 15mm,\n        fill=blue!50,\n        yshift=90 mm\n        ] (Hidden2-\\i) at (6.0,-\\i * 2) {\\large $h_\\i^{(2)}$};\n        \n}\n\n\\node[circle, \n    minimum size = 15mm,\n    fill=red!30\n    ] (Output) at (9,0) {\\large $\\hat{y}_1$};\n\n% Connect neurons In-Hidden1\n\\foreach \\j in {3,...,7}\n{\n    \\draw[->, shorten >=1pt] (Input) -- (Hidden1-\\j);   \n}\n% Connect neurons Hidden1-Hidden2\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden1-\\i) -- (Hidden2-\\i);   \n    \n}\n\n\\foreach \\i in {3,...,7}\n{\n    \n        \\draw[->, shorten >=1pt] (Hidden2-\\i) -- (Output);   \n}\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$6.00$} (Hidden1-1);   \n\\draw[->, shorten >=1pt] (Hidden1-1) -- node [midway,above] {$-1.00$} (Hidden2-1); \n\\draw[->, shorten >=1pt] (Hidden2-1) -- node [midway] {$-1.00$} (Output); \n\\draw[->, shorten >=1pt] (6,6) node [below] {$0.70$} --  (Hidden2-1); \n\\draw[->, shorten >=1pt] (3,6) node [below] {$0.00$} --  (Hidden1-1); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$0.00$} (Hidden1-8); \n\\draw[->, shorten >=1pt] (3,-9) node [below] {$0.00$} --  (Hidden1-8); \n\\draw[->, shorten >=1pt] (Hidden1-8) -- node [midway,above] {$0.00$} (Hidden2-8); \n\\draw[->, shorten >=1pt] (6,-9) node [below] {$1.00$} --  (Hidden2-8); \n\\draw[->, shorten >=1pt] (Hidden2-8) -- node [midway] {$0.97$} (Output); \n\n\\draw[->, shorten >=1pt] (Input) -- node [midway] {$3.50$} (Hidden1-2); \n\\draw[->, shorten >=1pt] (3,4) node [below] {$-0.42$} --  (Hidden1-2); \n\\draw[->, shorten >=1pt] (Hidden1-2) -- node [midway,above] {$-1.00$} (Hidden2-2); \n\\draw[->, shorten >=1pt] (6,4) node [below] {$0.27$} --  (Hidden2-2); \n\\draw[->, shorten >=1pt] (Hidden2-2) -- node [midway] {$-1.00$} (Output); \n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n![](index_files/figure-html/cell-63-output-1.svg){}\n:::\n:::\n\n\nWe get:\n\n::: {.cell execution_count=63}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n%%itikz --temp-dir --tex-packages=tikz,pgfplots --tikz-libraries=arrows --implicit-standalone\n\\begin{tikzpicture}[scale=1.5]\n\\begin{axis}[grid,ymin=-2,ymax=2,ytick={-2,-1,...,2},xmin=0,xmax=1]\n\\addplot[color=blue,thick,samples=1000]{-max(-max(6*x,0)+0.70,0))+0.97-max(-max(3.50*x - 0.42,0)+0.27,0)};\n\\addplot[color=green,samples=1000,domain=0:1]{sin(deg(2*3.14*x))};\n\\end{axis}\n\\end{tikzpicture}\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n![](index_files/figure-html/cell-64-output-1.svg){}\n:::\n:::\n\n\nWe then just continue this methodology. It should begin to make more sense to you now, how more neurons can enable more unique areas of effect, why we need two or more hidden layers, and why we need nonlinear activation functions to map nonlinear problems. \n\nWe can write a `ReLUActivation` class to represent the ReLU activation function:\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nclass ReLUActivation:\n\n    # Forward pass\n    def forward(self, inputs):\n        # Calculate output values from the inputs\n        self.output = np.maximum(0, inputs)\n```\n:::\n\n\nLet's apply this activation function to the `DenseLayer`'s outputs in our code:\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nfrom nnfs.datasets import spiral_data\nimport numpy as np\n\n# Create dataset\nX, y = spiral_data(samples=100, classes=3)\n\n# Create Dense layer with 2 input features and 3 output values\ndense1 = DenseLayer(2, 3)\n\n# Create ReLU activation function (to be used with the DenseLayer)\nactivation1 = ReLUActivation()\n\n# Make a forward pass of our training data through this layer\ndense1.forward(X)\n\n# Forward pass through our activation function\n# Takes in output from the previous layer\nactivation1.forward(dense1.output)\n\n# Let's see output of the first few samples\nprint(activation1.output[:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.0000000e+00 0.0000000e+00 0.0000000e+00]\n [1.3520580e-04 1.8173116e-05 0.0000000e+00]\n [2.3245417e-04 0.0000000e+00 0.0000000e+00]\n [3.8226307e-04 0.0000000e+00 0.0000000e+00]\n [5.7436468e-04 0.0000000e+00 0.0000000e+00]]\n```\n:::\n:::\n\n\nAs we can see, negative values have been clipped (modified to zero). That's all there is to the rectified linear activation function used in the hidden layer. Let's talk about the activation function that we are going to use on the output of the last layer.\n\n## The Softmax Activation function\n\nIn our case, we're looking to get this model to be a classifier, so we want an activation function meant for classification. One of these is the softmax activation function. First, why are we bothering with another activation function? It just depends on what our overall goals are. \n\nThe rectified linear unit is unbounded, not normalized with other units and exclusive. \"Not normalized\" implies the values can be anything, an output of `[12,99,318]` is without context, and exclusive means each output is independent of others. To address this lack of context, the softmax activation function on the output data can take in non-normalized, or uncalibrated, inputs and produce a normalized distribution of probabilities for our classes. In the case of classification, what we want to see is a prediction of which class the network thinks the input represents. This distribution returned by the softmax activation function represents confidence scores in our overarching algorithm/program that uses this network. For example, if our network has a confidence distirbution for two classes $[0.45,0.55]$, the prediction is the $2$nd class, but the confidence in this prediction isn't very high. \n\nMaybe our program wouldn't act in this case, since it's not very confident. \n\nThe softmax function takes as input a vector of $L$ real numbers and normalizes it into a probability distribution consisting of $L$ probabilities proportional to the exponentials of the input numbers. \n\n*Definition*. The standard(unit) **softmax** function $\\sigma:\\mathbf{R}^L \\to (0,1)^L$ takes a vector $\\mathbf{z}=(z_1,\\ldots,z_l)\\in\\mathbf{R}^L$ and computes each component of the vector $\\sigma(\\mathbf{z})\\in(0,1)^L$ with:\n\n\\begin{align*}\n\\sigma(\\mathbf{z})_i = \\frac{e^{z_{i}}}{\\sum_{l=1}^{L}e^{z_{l}}}\n\\end{align*}\n\nThat might look daunting, but it's easy to follow. Suppose the example outputs from a neural network layer are:\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nlayer_outputs = [4.80, 1.21, 2.385]\n```\n:::\n\n\nThen, the normalized values are:\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\nimport numpy as np\n\nnorm_values = np.exp(layer_outputs)/np.sum(np.exp(layer_outputs))\nprint(norm_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.89528266 0.02470831 0.08000903]\n```\n:::\n:::\n\n\nTo train in batches, we need to convert this functionality to accept layer outputs in batches. Do this is easy:\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nlayer_outputs = np.random.randn(100,3)\nnorm_values = np.exp(layer_outputs)/np.sum(np.exp(layer_outputs),axis=1,keepdims=True)\n```\n:::\n\n\nWe can now write a `SoftmaxActivation` class as:\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\n# Softmax activation\nclass SoftmaxActivation:\n\n    # Forward pass\n    def forward(self, inputs):\n        exp_values = np.exp(inputs - np.max(inputs, axis=1, keepdims=True))\n        probabilities = exp_values / np.sum(exp_values, axis=1, keepdims=True)\n        self.output = probabilities\n```\n:::\n\n\nWe also included a subtraction of the largest of the inputs before we do the exponentiation. There are two main pervasive challenges with neural networks : dead neurons and very large numbers (referred to as exploding values). Dead neurons and enormous numbers can wreak havoc down the line and render a network useless over time. Let's see some examples of how:\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}