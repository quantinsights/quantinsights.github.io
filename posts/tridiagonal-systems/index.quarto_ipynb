{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Tridiagonal Systems\"\n",
        "author: \"Quasar\"\n",
        "date: \"2024-11-15\"\n",
        "categories: [Numerical Methods]      \n",
        "image: \"image.jpg\"\n",
        "toc: true\n",
        "toc-depth: 3\n",
        "format:\n",
        "    html:\n",
        "        code-tools: true\n",
        "        code-block-border-left: true\n",
        "        code-annotations: below\n",
        "        highlight-style: pygments\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "The special case of a system of linear equations that is *tridiagonal*, that is, has non-zero elements only on the diagonal plus or minus one column, is one that occurs frequently. Also common are systems that are *band-diagonal*, with non-zero elements only along a few diagonal lines adjacent to the main diagonal (above and below).\n",
        "\n",
        "For triadiagonal sets, the procedures $LU$-decomposition, forward- and back- substitution each take only $O(n)$ operations and the whole solution can be coded very concisely. In this blog post, I am going to explore solving triadiagonal matrix systems. I closely follow Daniel Duffy's exposition in *Chapter 13* of his excellent book [Financial Instrument Pricing using C++](https://www.amazon.co.uk/Financial-Instrument-Pricing-Using-Finance-ebook/dp/B07H51DPQP/ref=sr_1_1?crid=35L1ITLEUA1S&dib=eyJ2IjoiMSJ9.FeGDbbRPp2NQKdDQycirWzCkF5j0TlM92l9p6jCKk-U.9ZQRlCNBa5pshnZTad_fcM8KxN4SyD60z1tCbwwwE-g&dib_tag=se&keywords=Financial+Instrument+Pricing+Using+C%2B%2B&nsdOptOutParam=true&qid=1731655789&sprefix=financial+instrument+pricing+using+c%2B%2B%2Caps%2C177&sr=8-1).\n",
        "\n",
        "Let $A$ be a $m \\times n$ general banded matrix with $kl$ subdiagonals and $ku$ superdiagonals. Then, $a_{ij}=0$, when $|i - j| > kl + ku  + 1$. All non-zero elements are positioned on the main diagonal, $kl$ subdiagonals below it and $ku$ superdiagonals above it. \n",
        "\n",
        "- A *diagonal* matrix is a $n \\times n$ band matrix with $kl = ku = 0$.\n",
        "- A *Toeplitz* matrix is a $n \\times n$ band matrix $T_n=[t_{k,j};k,j=0,1,\\ldots,n-1]$ where $t_{k,j}=t_{k-j}$. That is, a matrix of the form:\n",
        "$$\n",
        "T_n = \\begin{bmatrix}\n",
        "t_0 & t_{-1} & t_{-2} & \\ldots & t_{-(n-1)}\\\\\n",
        "t_1 & t_0 & t_{-1} & \\ldots & t_{-(n-2)}\\\\\n",
        "t_2 & t_1 & t_{0} & \\ldots & t_{-(n-3)}\\\\\n",
        "\\vdots & & & \\ddots & \\\\\n",
        "t_{n-1} & t_{n-2} & t_{n-3} & \\ldots & t_{0}\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "- A *tridiagonal* (Jacobi) matrix is a $n \\times n$ band matrix of width three $kl = ku = 1$. \n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "b_0 & c_0 & 0 & \\ldots \\\\\n",
        "a_1 & b_1 & c_1 & \\ldots \\\\\n",
        "0 & a_2 & b_2 & \\ldots \\\\\n",
        "& & & \\ldots \\\\\n",
        "& & & \\ldots & a_{n-2} & b_{n-2} & c_{n-2}\\\\\n",
        "& & & \\ldots & 0 & a_{n-1} & b_{n-1}\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Consider a two-point boundary value problem on the interval $(0,1)$ with Dirichlet boundary conditions:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\frac{d^2 u}{d x^2} &= f(x), \\quad 0 < x < 1\\\\\n",
        "u(0) &= \\phi, \\\\\n",
        "u(1) &= \\psi \n",
        "\\end{align*}\n",
        "$$ {#eq-two-point-bvp}\n",
        "\n",
        "We approximate the solution $u$ by creating a *discrete mesh of points* defined by $\\{x_j\\}$, $j=0,\\ldots,N$ where $N$ is a positive integer. At each interior mesh point the second derivative in the @eq-two-point-bvp can be approximated by a second-order divided difference. The corresponding discrete scheme is:\n",
        "\n",
        "$$\n",
        "\\begin{matrix}\n",
        "U_0 &- 2U_1 &+ U_2 & & & & & & & &= h^2 f_1 \\\\\n",
        "& U_1 &- 2U_2 &+ U_3  & & & & & & &= h^2 f_2 \\\\\n",
        "& & U_2 &- 2U_3 &+ U_4 & & & & & &= h^2 f_3 \\\\\n",
        "& &     &       &      & \\ldots & & & & & \\vdots \\\\\n",
        "& &     &       &      & \\ldots & U_{N-3} &- 2U_{N-2} &+ U_{N-1} &  &= h^2 f_{N-2}\\\\\n",
        "& &     &       &      & \\ldots &  & U_{N-2} &-2 U_{N-1} &+ U_N &= h^2 f_{N-1}\\\\\n",
        "\\end{matrix}\n",
        "$$\n",
        "\n",
        "Since $U_0 = \\phi$ and $U_N = \\psi$, we have $N-1$ equations in ${N-1}$ unknowns. These can be arranged in the matrix form as:\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "-2 & 1\\\\\n",
        "1  &-2 & 1  &   & \\ldots &   &    &  \\\\\n",
        "   & 1 &-2  & 1 & \\ldots &   &    &  \\\\\n",
        "   &   &    &   & \\ldots &   &    &  \\\\\n",
        "   &   &    &   & \\ldots & 1 & -2 & 1 \\\\\n",
        "   &   &    &   & \\ldots &   &  1 & -2\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "U_1 \\\\\n",
        "U_2 \\\\\n",
        "\\vdots\\\\\n",
        "U_{N-2} \\\\\n",
        "U_{N-1}\n",
        "\\end{bmatrix} = \\begin{bmatrix}\n",
        "h^2 f_1 - \\phi\\\\\n",
        "h^2 f_2 \\\\\n",
        "\\vdots\\\\\n",
        "h^2 f_{N-2} \\\\\n",
        "h^2 f_{N-1} - \\psi\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "or in matrix form $AU=F$.\n",
        "\n",
        "## Thomas Algorithm\n",
        "\n",
        "The Thomas algorithm is an efficient way of solving tridiagonal matrix systems. It is based on $LU$-decomposition in which the matrix system $Ax=r$ is written as $LUx=r$, where $L$ is a lower-triangular matrix and $U$ is an upper triangular matrix. The system can be efficiently solved by setting $Ux=\\rho$ and then solving first $L\\rho=r$ and then $Ux=\\rho$ for $x$. The Thomas algorithm consists of two steps. In step 1, decomposing the matrix $M = LU$ and solving $L\\rho=r$ are accomplished in a single downwards sweep, taking us straight from $Ax=r$ to $Ux=\\rho$. In step 2, the equation $Ux = \\rho$ is solved for $x$ in an upward sweep.\n",
        "\n",
        "### Stage 1\n",
        "\n",
        "In the first stage, the matrix equation $Ax=r$ is converted to the form $Ux=\\rho$. Initially, the matrix equation looks like this:\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "{\\color{blue}b_1} & {\\color{blue}c_1} & 0 & 0 & 0 & 0\\\\\n",
        "{\\color{blue}a_2} & {\\color{blue}b_2} & {\\color{blue}c_2} & 0 & 0 & 0\\\\\n",
        "0 & {\\color{blue}a_3} & {\\color{blue}b_3} & {\\color{blue}c_3} & 0 & 0\\\\\n",
        "0 & 0 & {\\color{blue}a_4} & {\\color{blue}b_4} & {\\color{blue}c_4} & 0\\\\\n",
        "0 & 0 & 0 & {\\color{blue}a_5} & {\\color{blue}b_5} & {\\color{blue}c_5}\\\\\n",
        "0 & 0 & 0 & 0 & a_6 & b_6\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "{\\color{blue}r_1} \\\\\n",
        "{\\color{blue}r_2} \\\\\n",
        "{\\color{blue}r_3} \\\\\n",
        "{\\color{blue}r_4} \\\\\n",
        "{\\color{blue}r_5} \\\\\n",
        "{\\color{blue}r_6}\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Row $1$:\n",
        "\n",
        "$$\n",
        "{\\color{blue}b_1} x_1 + {\\color{blue}c_1} x_2 = {\\color{blue}r_1}\n",
        "$$\n",
        "\n",
        "Dividing throughout by $\\color{blue}b_1$,\n",
        "\n",
        "$$\n",
        "x_1 + {\\color{blue}\\frac{c_1}{b_1}} x_2 = {\\color{blue}\\frac{r_1}{b_1}}\n",
        "$$\n",
        "\n",
        "Rewrite:\n",
        "\n",
        "$$\n",
        "x_1 + {\\color{red}\\gamma_1} x_2 = {\\color{red}\\rho_1}, \\quad {\\color{red}\\gamma_1} = {\\color{blue}\\frac{c_1}{b_1}}, \\quad {\\color{red}\\rho_1} = {\\color{blue}\\frac{r_1}{b_1}}\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "{\\color{red}1} & {\\color{red}\\gamma_1} & 0 & 0 & 0 & 0\\\\\n",
        "{\\color{blue}a_2} & {\\color{blue}b_2} & {\\color{blue}c_2} & 0 & 0 & 0\\\\\n",
        "0 & {\\color{blue}a_3} & {\\color{blue}b_3} & {\\color{blue}c_3} & 0 & 0\\\\\n",
        "0 & 0 & {\\color{blue}a_4} & {\\color{blue}b_4} & {\\color{blue}c_4} & 0\\\\\n",
        "0 & 0 & 0 & {\\color{blue}a_5} & {\\color{blue}b_5} & {\\color{blue}c_5}\\\\\n",
        "0 & 0 & 0 & 0 & a_6 & b_6\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "{\\color{red}\\rho_1} \\\\\n",
        "{\\color{blue}r_2} \\\\\n",
        "{\\color{blue}r_3} \\\\\n",
        "{\\color{blue}r_4} \\\\\n",
        "{\\color{blue}r_5} \\\\\n",
        "{\\color{blue}r_6}\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Row $2$:\n",
        "\n",
        "$$\n",
        "{\\color{blue}a_2} x_1 + {\\color{blue}b_2} x_2 + {\\color{blue}c_2} x_3 = {\\color{blue}r_2}\n",
        "$$\n",
        "\n",
        "Use $a_2$ times row $1$ of the matrix to eliminate the first term\n",
        "\n",
        "$$\n",
        "a_2(x_1 + {\\color{red}\\gamma_1}x_2 = {\\color{red}\\rho_1})\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\begin{array}{c|cccc}\n",
        "\\text{Row 2} & a_2 x_1 &+ b_2 x_2 &+ c_2 x_3 &= r_2\\\\\n",
        "a_2 \\times \\text{Row 1} & a_2 x_1 &+ a_2 \\gamma_1 x_2 & &= a_2\\rho_1\\\\\n",
        "\\hline\n",
        "\\text{New Row 2} & & (b_2 - a_2 \\gamma_1) x_2 &+ c_2 x_3  &= r_2 - a_2 \\rho_1\n",
        "\\end{array}\n",
        "$$\n",
        "\n",
        "Dividing throughout by $(b_2 - a_2 \\gamma_1)$, we get:\n",
        "\n",
        "$$\n",
        "x_2 + \\frac{c_2}{b_2 - a_2 \\gamma_1}x_3 = \\frac{(r_2 - a_2 \\rho_1)}{(b_2 - a_2 \\gamma_1)}\n",
        "$$\n",
        "\n",
        "We can rewrite this as:\n",
        "\n",
        "$$\n",
        "x_2 + \\gamma_2 x_3 = \\rho_2, \\quad \\gamma_2 = \\frac{c_2}{b_2 - a_2 \\gamma_1}, \\quad \\rho_2 = \\frac{(r_2 - a_2 \\rho_1)}{(b_2 - a_2 \\gamma_1)}\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "1 & \\gamma_1 & 0 & 0 & 0 & 0\\\\\n",
        "0 & 1 & \\gamma_2 & 0 & 0 & 0\\\\\n",
        "0 & a_3 & b_3 & c_3 & 0 & 0\\\\\n",
        "0 & 0 & a_4 & b_4 & c_4 & 0\\\\\n",
        "0 & 0 & 0 & a_5 & b_5 & c_5\\\\\n",
        "0 & 0 & 0 & 0 & a_6 & b_6\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "\\rho_1 \\\\\n",
        "\\rho_2 \\\\\n",
        "r_3 \\\\\n",
        "r_4 \\\\\n",
        "r_5 \\\\\n",
        "r_6\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Row $3$:\n",
        "\n",
        "$$\n",
        "a_3 x_2 + b_3 x_3 + c_3 x_4 = r_3\n",
        "$$\n",
        "\n",
        "Use $a_3$ times row $2$ of the matrix to eliminate the first term:\n",
        "\n",
        "$$\n",
        "\\begin{array}{c|cccc}\n",
        "\\text{Row 3} & a_3 x_2 &+ b_3 x_3 &+ c_3 x_4 &= r_3\\\\\n",
        "a_3 \\times \\text{Row 2} & a_3 x_2 &+ a_3 \\gamma_2 x_3 & &= a_3\\rho_2\\\\\n",
        "\\hline\n",
        "\\text{New Row 3} & & (b_3 - a_3 \\gamma_2) x_3 &+ c_3 x_4  &= r_3 - a_3 \\rho_2\n",
        "\\end{array}\n",
        "$$\n",
        "\n",
        "Dividing throughout by $(b_3 - a_3 \\gamma_2)$, we have:\n",
        "\n",
        "$$\n",
        "x_3 + \\frac{c_3}{b_3 - a_3 \\gamma_2} x_4 = \\frac{r_3 - a_3\\rho_2}{b_3 - a_3 \\gamma_2}\n",
        "$$\n",
        "\n",
        "We can rewrite this as:\n",
        "\n",
        "$$\n",
        "x_3 + \\gamma_3 x_4 = \\rho_3, \\quad  \\gamma_3 = \\frac{c_3}{b_3 - a_3 \\gamma_2}, \\quad \\rho_3=\\frac{r_3 - a_3 \\rho_2}{b_3 - a_3 \\gamma_2}\n",
        "$$\n",
        "\n",
        "Continuing in this fashion, we get:\n",
        "\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "1 & \\gamma_1 & 0 & 0 & 0 & 0\\\\\n",
        "0 & 1 & \\gamma_2 & 0 & 0 & 0\\\\\n",
        "0 & 1 & 1 & \\gamma_3 & 0 & 0\\\\\n",
        "0 & 0 & 0 & 1 & \\gamma_4 & 0\\\\\n",
        "0 & 0 & 0 & 0 & 1 & \\gamma_5\\\\\n",
        "0 & 0 & 0 & 0 & a_6 & b_6\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "\\rho_1 \\\\\n",
        "\\rho_2 \\\\\n",
        "\\rho_3 \\\\\n",
        "\\rho_4 \\\\\n",
        "\\rho_5 \\\\\n",
        "r_6\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Row $6$:\n",
        "\n",
        "\n",
        "$$\n",
        "a_6 x_5 + a_6 x_6 = r_6\n",
        "$$\n",
        "\n",
        "Use $a_6$ times row 5 of the matrix:\n",
        "\n",
        "$$a_6(x_5 + \\gamma_5 x_6 = \\rho_5)$$\n",
        "\n",
        "$$\n",
        "\\begin{array}{c|cccc}\n",
        "\\text{Row 6} & a_6 x_5 &+ b_6 x_6 &= r_6\\\\\n",
        "a_6 \\times \\text{Row 5} & a_6 x_5 &+ a_6 \\gamma_5 x_6  &= a_6\\rho_5\\\\\n",
        "\\hline\n",
        "\\text{New Row 3} & & (b_6 - a_6 \\gamma_5) x_6  &= r_6 - a_6 \\rho_5\n",
        "\\end{array}\n",
        "$$\n",
        "\n",
        "Dividing throughout by $(b_6 - a_6 \\gamma_5)$, we can rewrite:\n",
        "\n",
        "$$\n",
        "x_6 = \\rho_6, \\quad \\rho_6 = \\frac{r_6 - a_6 \\rho_5}{b_6 - a_6 \\gamma_5}\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "1 & \\gamma_1 & 0 & 0 & 0 & 0\\\\\n",
        "0 & 1 & \\gamma_2 & 0 & 0 & 0\\\\\n",
        "0 & 1 & 1 & \\gamma_3 & 0 & 0\\\\\n",
        "0 & 0 & 0 & 1 & \\gamma_4 & 0\\\\\n",
        "0 & 0 & 0 & 0 & 1 & \\gamma_5\\\\\n",
        "0 & 0 & 0 & 0 & 0 & 1\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "\\rho_1 \\\\\n",
        "\\rho_2 \\\\\n",
        "\\rho_3 \\\\\n",
        "\\rho_4 \\\\\n",
        "\\rho_5 \\\\\n",
        "\\rho_6\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "These steps may be summarized as compute the following sequences:\n",
        "\n",
        "$$\n",
        "\\gamma_1 = \\frac{c_1}{b_1}, \\quad \\rho_1 = \\frac{r_1}{b_1}\n",
        "$$\n",
        "\n",
        "And \n",
        "$$\\gamma_j = \\frac{c_j}{b_j - a_j \\gamma_{j-1}}, \\quad \\rho_j = \\frac{r_j - a_j \\rho_{j-1}}{b_j - a_j \\gamma_{j-1}}$$ \n",
        "\n",
        "for $j=2:6$.\n",
        "\n",
        "At this point, the matrix has been reduced to the upper diagonal form, so our equations are of the form $Ux = \\rho$. \n",
        "\n",
        "### Stage 2\n",
        "\n",
        "The matrix is now in a form which is trivial to solve for $x$. We start with the last row and work our way up. The final equation is already solved.\n",
        "\n",
        "$$\n",
        "x_6 = \\rho_6\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "1 & \\gamma_1 & 0 & 0 & 0 & 0\\\\\n",
        "0 & 1 & \\gamma_2 & 0 & 0 & 0\\\\\n",
        "0 & 1 & 1 & \\gamma_3 & 0 & 0\\\\\n",
        "0 & 0 & 0 & 1 & \\gamma_4 & 0\\\\\n",
        "0 & 0 & 0 & 0 & 1 & \\gamma_5\\\\\n",
        "0 & 0 & 0 & 0 & 0 & 1\n",
        "\\end{bmatrix} \\begin{bmatrix}\n",
        "x_1 \\\\\n",
        "x_2 \\\\\n",
        "x_3 \\\\\n",
        "x_4 \\\\\n",
        "x_5 \\\\\n",
        "x_6\n",
        "\\end{bmatrix} =\n",
        "\\begin{bmatrix}\n",
        "\\rho_1 \\\\\n",
        "\\rho_2 \\\\\n",
        "\\rho_3 \\\\\n",
        "\\rho_4 \\\\\n",
        "\\rho_5 \\\\\n",
        "\\rho_6\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Row $5$:\n",
        "$$\n",
        "x_5 + \\gamma_5 x_6 = \\rho_5\n",
        "$$\n",
        "\n",
        "Rearrange to get:\n",
        "\n",
        "$$\n",
        "x_5 = \\rho_5 - \\gamma_5 x_6\n",
        "$$\n",
        "\n",
        "Row $4$:\n",
        "\n",
        "$$\n",
        "x_4 + \\gamma_4 x_5 = \\rho_4\n",
        "$$\n",
        "\n",
        "Rearrange to get:\n",
        "\n",
        "\n",
        "$$\n",
        "x_4 = \\rho_4 - \\gamma_4 x_5\n",
        "$$\n",
        "\n",
        "Continuing in this fashion, we find that, $x_6 = \\rho_6$ and\n",
        "\n",
        "$$\n",
        "x_j = \\rho_j - \\gamma_j x_{j+1}\n",
        "$$\n",
        "\n",
        "for all $j=1:5$. \n",
        "\n",
        "## Computational Solution\n",
        "\n",
        "Let's quickly code up the algorithm in Julia.\n"
      ],
      "id": "83fd1240"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "function thomasAlgorithm(a, b, c, r)\n",
        "    N = size(a)[1]\n",
        "\n",
        "    # Stage 1\n",
        "    γ = Array{Float64,1}(undef,N)\n",
        "    ρ = Array{Float64,1}(undef,N)\n",
        "    u = Array{Float64,1}(undef,N)\n",
        "\n",
        "    γ[1] = c[1]/b[1]\n",
        "    ρ[1] = r[1]/b[1]\n",
        "\n",
        "    for j=2:N\n",
        "        γ[j] = c[j]/(b[j] - a[j] * γ[j-1])\n",
        "        ρ[j] = (r[j] - a[j] * ρ[j-1])/(b[j] - a[j] * γ[j-1])\n",
        "    end\n",
        "\n",
        "    # Stage 2\n",
        "    u[N] =  ρ[N]\n",
        "\n",
        "    for j=reverse(1:N-1)\n",
        "        u[j] = ρ[j] - γ[j] * u[j+1]\n",
        "    end\n",
        "\n",
        "    return u\n",
        "end\n",
        "\n",
        "# Test Case\n",
        "\n",
        "a = Array{Float64,1}([0, 2, 2, 2])\n",
        "b = Array{Float64,1}([3, 3, 3, 3])\n",
        "c = Array{Float64,1}([2, 2, 2, 0])\n",
        "r = Array{Float64,1}([12, 17, 14, 7])\n",
        "u = thomasAlgorithm(a, b, c, r)\n",
        "\n",
        "print(u)"
      ],
      "id": "f689a73e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here is an implementation in modern C++:\n",
        "\n",
        "```cpp\n",
        "#include <iostream>\n",
        "#include <memory>\n",
        "#include <functional>\n",
        "#include <concepts>\n",
        "\n",
        "template <typename T>\n",
        "concept Real = std::integral<T> || std::floating_point<T>;\n",
        "\n",
        "template <typename T>\n",
        "requires Real<T>\n",
        "using Function = std::function<void(std::vector<T>, std::vector<T>, std::vector<T>, std::vector<T>, std::vector<T>&)>;\n",
        "\n",
        "template <typename T>\n",
        "requires Real<T>\n",
        "void thomasAlgorithm(\n",
        "      std::vector<T> a\n",
        "    , std::vector<T> b\n",
        "    , std::vector<T> c\n",
        "    , std::vector<T> r\n",
        "    , std::vector<T>&x \n",
        "    ){\n",
        "    //Stage-1\n",
        "    int N = a.size();\n",
        "    std::vector<T> gamma(N);\n",
        "    std::vector<T> rho(N);\n",
        "    x = std::vector<T>(N);\n",
        "\n",
        "    gamma[0] = c[0]/b[0]; \n",
        "    rho[0] = r[0]/b[0];\n",
        "\n",
        "    for(int j{1}; j < N; ++j)\n",
        "    {\n",
        "        gamma[j] = c[j]/(b[j] - a[j] * gamma[j-1]);\n",
        "        rho[j] = (r[j] - a[j] * rho[j-1])/(b[j] - a[j] * gamma[j-1]);\n",
        "    }\n",
        "\n",
        "    //Stage-2\n",
        "    x[N-1] = rho[N-1];\n",
        "    for(int j{N-2}; j >= 0; j--)\n",
        "    {\n",
        "        x[j] = rho[j] - gamma[j] * x[j+1];\n",
        "    }\n",
        "}\n",
        "\n",
        "template <typename T>\n",
        "requires Real<T>\n",
        "class LUTridiagonalSolver{\n",
        "    private:\n",
        "        std::vector<T> m_a;\n",
        "        std::vector<T> m_b;\n",
        "        std::vector<T> m_c;\n",
        "        std::vector<T> m_r;\n",
        "        std::vector<T> m_x;\n",
        "        Function<T> m_LUTridiagonalSolverStrategy;\n",
        "    \n",
        "    public:\n",
        "        LUTridiagonalSolver() = default;\n",
        "        LUTridiagonalSolver(\n",
        "              std::vector<T> a\n",
        "            , std::vector<T> b\n",
        "            , std::vector<T> c\n",
        "            , std::vector<T> r\n",
        "            , Function<T> solver) \n",
        "            : m_a {std::move(a)}\n",
        "            , m_b {std::move(b)}\n",
        "            , m_c {std::move(c)}\n",
        "            , m_r {std::move(r)}\n",
        "            , m_LUTridiagonalSolverStrategy {solver} \n",
        "            {}\n",
        "\n",
        "        std::vector<T> solve(){\n",
        "            m_LUTridiagonalSolverStrategy(m_a, m_b, m_c, m_r, m_x);\n",
        "            return m_x;\n",
        "        }\n",
        "\n",
        "        LUTridiagonalSolver(const LUTridiagonalSolver& ) = delete;\n",
        "        LUTridiagonalSolver operator=(LUTridiagonalSolver& ) = delete;\n",
        "        ~LUTridiagonalSolver(){}\n",
        "};\n",
        "\n",
        "int main()\n",
        "{\n",
        "    std::vector<double> a{0, 2, 2, 2};\n",
        "    std::vector<double> b{3, 3, 3, 3};\n",
        "    std::vector<double> c{2, 2, 2, 0};\n",
        "    std::vector<double> r{12, 17, 14, 7};\n",
        "\n",
        "    LUTridiagonalSolver<double> solver(a, b, c, r, thomasAlgorithm<double>);\n",
        "    std::vector<double> u = solver.solve();\n",
        "    return 0;\n",
        "}\n",
        "```\n",
        "[Compiler Explorer](https://godbolt.org/z/T7846WY8v)\n",
        "\n",
        "## Deriving the one-dimensional Heat equation\n",
        "\n",
        "Consider a slender homogenous rod, lying along the $x$-axis and insulated, so that no heat can escape across its longitudinal surface. In addition, we make the simplifying assumption that the temperature in the rod is constant on each cross-section perpendicular to the $x$-axis, and thus that the flow of heat in the rod takes place only in the $x$-direction.\n",
        "\n",
        "Consider a small segment of the rod at position $x$ of length $\\Delta x$.\n",
        "\n",
        "The thermal energy in this segment at time $t$ is:\n",
        "\n",
        "$$\n",
        "E(x,x+\\Delta x, t) \\approx u(x,t) s \\rho \\Delta x\n",
        "$$\n",
        "\n",
        "where $s$ is the constant of specific heat i.e. amount of heat required to raise one unit of mass by one unit of temperature, $\\rho$ is the mass density. \n",
        "\n",
        "Fourier's law of heat conduction quantifies the idea that heat flows from warmer to colder regions and states that the (rightward) heat flux density $\\phi(x,t)$ (the flow of heat energy per unit area per unit time, SI units $J/s/m^2$) at any point is:\n",
        "\n",
        "$$\n",
        "\\phi(x,t) = -K_0 u_x (x, t)\n",
        "$$\n",
        "\n",
        "where $K_0$ is the thermal conductivity of the rod. The negative sign shows that the heat flows from higher temperature regions to colder temperature regions.\n",
        "\n",
        "Appealing to the law of conservation of energy:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\underbrace{\\frac{\\partial}{\\partial t}(u(x,t) s \\rho \\Delta x)}_{\\text{Heat flux through segment}} = \\underbrace{(-K_0 u_x(x, t))}_{\\text{Flux in}} - \\underbrace{(- K_0 u_x(x + \\Delta x,t))}_{\\text{Flux out}}\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-content}\n",
        "\n",
        "Dividing throughout by $\\Delta x$ we have:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "u_t(x,t) \\approx \\frac{K_0}{s \\rho } \\frac{u_x(x+\\Delta x, t) - u_x(x,t)}{\\Delta x}\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "Letting $\\Delta x \\to 0$ improves the approximation and leads to the heat equation:\n",
        "\n",
        "$$\n",
        "u_t=c^2 u_{xx}\n",
        "$$\n",
        "\n",
        "where $c^2 = \\frac{K_0}{\\rho s}$ is called the *thermal diffusivity*. \n",
        "\n",
        "## The Crank-Nicolson and Theta methods\n",
        "\n",
        "Consider the initial boundary value problem for the $1$d-heat equation:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "u_t &= a^2 u_{xx}, \\quad & 0 < x < L, t>0\\\\\n",
        "u(x,0) &= f(x), \\quad 0 \\leq x \\leq L \\\\\n",
        "u(0,t) &= A, \\\\\n",
        "u(L,t) &= B\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "In this case, we can assume without the loss of generality that $L = 1$. Here, $a$, $A$ and $B$ are constants.\n",
        "\n",
        "We find a solution to this system in the case when $A = B = 0$ and $a = 1$ by the *method of the separation of variables*. In this case, the analytical solution is:\n",
        "\n",
        "$$\n",
        "u(x,t) = \\frac{8}{\\pi^2}\\sum_{n=1}^{\\infty}\\frac{1}{n^2}\\sin\\left(\\frac{n\\pi}{2}\\right)\\sin(n\\pi x)\\exp(-n^2 \\pi^2 t)\n",
        "$$\n",
        "\n",
        "and we are going to use this solution as a benchmark against which the numerical solutions can be compared.\n",
        "\n",
        "We can discretize a parabolic PDE in the space dimension (using centered difference schemes) while keeping the time variable continuous. We examine the following initial boundary value problem for the $1$d-heat equation on the unit interval with zero Dirichlet boundary conditions. \n",
        "\n",
        "The problem is:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "u_t &= u_{xx}, \\quad & 0 < x < 1, t>0\\\\\n",
        "u(x,0) &= f(x), \\quad 0 \\leq x \\leq 1 \\\\\n",
        "u(0,t) &= u(1,t) = 0\n",
        "\\end{align*}\n",
        "$$ {#eq-IBVP}\n",
        "\n",
        "We partition the space interval $(0,1)$ into $J$ subintervals and we approximate @eq-IBVP by the *semi-discrete* scheme:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\frac{dU_j}{dt} &= \\frac{1}{h^2}(U_{j+1} - 2U_j + U_{j-1}), \\quad 1 \\leq j \\leq J-1 \\\\\n",
        "U_0(t) &= U_J(t) = 0, \\quad t > 0 \\\\ \n",
        "U_j(0) &= f(x_j)\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "where $h = 1/J$ is the constant mesh size. The $U_j$'s are functions of time $t$. So, we define the following vectors:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "U(t) &= (U_1(t),U_2(t),\\ldots,U_J(t))^T \\\\\n",
        "U^0 &= (f(x_1),f(x_2),\\ldots,f(x_{J-1}))^T\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "Then, we can rewrite the system @eq-IBVP as a system of ordinary differential equations:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\frac{dU}{dt} &= AU\\\\\n",
        "U(0) &= U^0\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-eq-1}\n",
        "\n",
        "where the matrix $A$ is given by:\n",
        "\n",
        "$$\n",
        "A = \\frac{1}{h^2}\\begin{bmatrix}\n",
        "-2 & 1 & 0 & \\ldots \\\\\n",
        "1  &-2 & 1 & \\ldots \\\\\n",
        "0  & 1 & -2 & \\ldots \\\\\n",
        "   &   &    & \\ldots \\\\\n",
        "      &   &    & \\ldots & 1 & -2 & 1\\\\\n",
        "      &   &    & \\ldots & 0 & 1  & -2\\\\\n",
        "\\end{bmatrix}\n",
        "$$ \n",
        "\n",
        "There are many discretization schemes. I plan to explore various finite difference schemes and their application to derivatives pricing in future posts. For now, I will concentrate on the one-step explicit and implicit methods to discretise the system  of ODEs(@eq-heat-eq-1) as:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\frac{U^{n+1 - U^n}}{\\Delta t} &= \\theta AU^{n+1} + (1-\\theta)AU^{n}, \\quad 0 \\leq n \\leq N-1, 0 \\leq \\theta \\leq 1 \\\\\n",
        "U^{0} &= U(0)\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-eq-2}\n",
        "\n",
        "In this case, $\\Delta t$ is the constant mesh size in time.\n",
        "\n",
        "We can rewrite @eq-heat-eq-2 in the equivalent form:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "U^{n+1} - U^{n} &= \\theta \\Delta t A U^{n+1} + \\Delta t (I- \\theta)AU^{n} \\\\\n",
        "[I - \\Delta t A]U^{n+1} &= (\\Delta t (1 - \\theta) + 1)AU^n\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-eq-3}\n",
        "\n",
        "or formally as:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "U^{n+1} = [1-\\Delta t \\theta A]^{-1} (I + \\Delta t(I - \\theta)) A U^n\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-eq-4}\n",
        "\n",
        "where $I$ is the identity matrix.\n",
        "\n",
        "Some special cases of $\\theta$ are:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\theta &= 1, \\quad \\text{Implicit Euler Scheme}\\\\\n",
        "\\theta &= 0, \\quad \\text{Explicit Euler Scheme}\\\\\n",
        "\\theta &= 1/2,\\quad \\text{Crank-Nicolson Scheme}\n",
        "\\end{align*}\n",
        "$$ {#eq-heat-eq-5}\n",
        "\n",
        "When the schemes are implicit, we can solve the system of equations (@eq-heat-eq-2) at each time level $n+1$ using the Thomas algorithm. No matrix inversion is needed in the case of explicit schemes. The formulation (@eq-heat-eq-1) is called the *method of lines* and it corresponds to semi-discretization of the PDE in the space direction while keeping the time variable continuous (I will explore MOL in future posts). \n",
        "\n",
        "We can write the scheme (@eq-heat-eq-3 - @eq-heat-eq-5) in the component form:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\frac{U^{n+1}j - U^{n}j}{\\Delta t} = \\theta(U^{n+1}_{j+1}-2U^{n+1}_j + U^{n+1}_{j-1})/h^2 + (1-\\theta)(U^{n}_{j+1}-2U^{n}_j + U^{n}_{j-1})/h^2\n",
        "\\end{align*}\n",
        "$${#eq-component-form}\n",
        "\n",
        "or equivalently:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "{U^{n+1}j - U^{n}_j} &= \\lambda\\theta(U^{n+1}_{j+1}-2U^{n+1}_j + U^{n+1}_{j-1})/h^2 \\\\&+ (1-\\theta)(U^{n}_{j+1}-2U^{n}_j + U^{n}_{j-1})\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "where $\\lambda = \\Delta t/h^2$. \n",
        "\n",
        "Finally:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "-\\lambda \\theta U^{n+1}_{j+1} + (1+2\\lambda \\theta)U_j^{n+1} - \\lambda \\theta U^{n+1}_{j-1} \\\\= \\lambda (1-\\theta)U^{n}_{j+1}+(1-2\\lambda(1-\\theta))U^{n}_j + \\lambda(1-\\theta)U^{n}_{j-1}\n",
        "\\end{align*}\n",
        "$$ {#eq-finite-difference-scheme}\n",
        "\n",
        "The system (@eq-finite-difference-scheme) is tridiagonal and we can apply the Thomas algorithm to solve it. In the case of the explicit Euler scheme $(\\theta = 0)$, these algorithms are not needed, because the solution at time level $n+1$ can be explicitly computed:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "U^{n+1}_j = \\lambda U^{n}_{j+1} + (1-2\\lambda)U^{n}_j +\\lambda U^{n}_{j-1}\n",
        "\\end{align*}\n",
        "$${#eq-explicit-euler}\n",
        "\n",
        "### Computational Solution\n",
        "\n",
        "I implemented the algorithm in @eq-finite-difference-scheme. This is a one-step marching scheme called BTCS(Backward in Time, Centered in Space) that computes the solution at time level $n+1$ in terms of the solution at time $n$. Since there are three unknowns to be computed at each time level $n+1$, we need to use the Thomas algorithm. The main steps in the algorithm are:\n",
        "\n",
        "- Choose input parameters and generate meshes\n",
        "- Define the initial solution and the boundary conditions\n",
        "- Compute the solution at each time upto and including expiration.\n"
      ],
      "id": "622546a6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "function initialCondition(x::Float64)\n",
        "    if(x >= 0 && x <= 0.50)\n",
        "        return 2.0 * x\n",
        "    \n",
        "    return 2.0 * (1 - x)\n",
        "end\n",
        "\n",
        "# BTCS scheme for the heat equation\n",
        "J = 20"
      ],
      "id": "50c0e910",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-1.11",
      "language": "julia",
      "display_name": "Julia 1.11.1",
      "path": "C:\\Users\\quasa_zxnl8hi\\AppData\\Roaming\\jupyter\\kernels\\julia-1.11"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}